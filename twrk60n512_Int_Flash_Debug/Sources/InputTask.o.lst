   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"InputTask.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	lwevent_group,36,4
  19              		.section	.rodata
  20              		.align	2
  21              	.LC0:
  22 0000 0A20496E 		.ascii	"\012 Input task started \012\000"
  22      70757420 
  22      7461736B 
  22      20737461 
  22      72746564 
  23 0017 00       		.section	.text.Input_task,"ax",%progbits
  24              		.align	2
  25              		.global	Input_task
  26              		.thumb
  27              		.thumb_func
  29              	Input_task:
  30              	.LFB0:
  31              		.file 1 "../Sources/InputTask.c"
   1:../Sources/InputTask.c **** /*
   2:../Sources/InputTask.c ****  * InputTask.c
   3:../Sources/InputTask.c ****  *
   4:../Sources/InputTask.c ****  *  Created on: Feb 6, 2014
   5:../Sources/InputTask.c ****  *      Author: Embedded Access Inc
   6:../Sources/InputTask.c ****  */
   7:../Sources/InputTask.c **** 
   8:../Sources/InputTask.c **** #include "main.h"
   9:../Sources/InputTask.c **** #include "tsi.h"
  10:../Sources/InputTask.c **** 
  11:../Sources/InputTask.c **** /*
  12:../Sources/InputTask.c ****  Lab 7 - defines 
  13:../Sources/InputTask.c **** #define SW1_EVENT 0x00000001
  14:../Sources/InputTask.c **** #define SW2_EVENT 0x00000002
  15:../Sources/InputTask.c ****  Lab 8 - defines 
  16:../Sources/InputTask.c **** #define ADC_TIMER_EVENT 0x00000004
  17:../Sources/InputTask.c ****  Add TSI 
  18:../Sources/InputTask.c **** #define TOUCH_EVENT 0x00000008
  19:../Sources/InputTask.c **** */
  20:../Sources/InputTask.c **** 
  21:../Sources/InputTask.c **** /* Lab 6 - Interrupts - Prototypes/Declarations */
  22:../Sources/InputTask.c **** void init_switch(LWGPIO_STRUCT_PTR sw,
  23:../Sources/InputTask.c **** 		LWGPIO_PIN_ID pin,
  24:../Sources/InputTask.c **** 		uint32_t mux,
  25:../Sources/InputTask.c **** 		INT_ISR_FPTR sw_isr
  26:../Sources/InputTask.c **** 		);
  27:../Sources/InputTask.c **** 
  28:../Sources/InputTask.c **** void sw1_isr(void * param);
  29:../Sources/InputTask.c **** void sw2_isr(void * param);
  30:../Sources/InputTask.c **** void adc_timer_isr(void); //Lab 8
  31:../Sources/InputTask.c **** 
  32:../Sources/InputTask.c **** /* Lab 7 - Global LW Event structure */
  33:../Sources/InputTask.c **** LWEVENT_STRUCT lwevent_group;
  34:../Sources/InputTask.c **** /* Note:
  35:../Sources/InputTask.c ****  * 
  36:../Sources/InputTask.c ****  * Can do this because we only make a single instance.
  37:../Sources/InputTask.c ****  * If multiple instances, declare LWEVENT_STRUCT within 
  38:../Sources/InputTask.c ****  * the task. 
  39:../Sources/InputTask.c ****  * 
  40:../Sources/InputTask.c ****  * */
  41:../Sources/InputTask.c **** 
  42:../Sources/InputTask.c **** extern const LWADC_INIT_STRUCT BSP_DEFAULT_LWADC_MODULE;
  43:../Sources/InputTask.c **** 
  44:../Sources/InputTask.c **** /*TASK*-----------------------------------------------------
  45:../Sources/InputTask.c **** * 
  46:../Sources/InputTask.c **** * Task Name    : Input_task
  47:../Sources/InputTask.c **** * Comments     :
  48:../Sources/InputTask.c **** *    This is the Input task
  49:../Sources/InputTask.c **** *
  50:../Sources/InputTask.c **** *END*-----------------------------------------------------*/
  51:../Sources/InputTask.c **** 
  52:../Sources/InputTask.c **** void Input_task(uint32_t initial_data)
  53:../Sources/InputTask.c **** {
  32              		.loc 1 53 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 144
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 80B5     		push	{r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 A6B0     		sub	sp, sp, #152
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 160
  44 0004 02AF     		add	r7, sp, #8
  45              	.LCFI2:
  46              		.cfi_def_cfa 7, 152
  47 0006 7860     		str	r0, [r7, #4]
  54:../Sources/InputTask.c **** 	//int NUM=1;// this is used for dividing 
  55:../Sources/InputTask.c **** 	_queue_id health_qid;
  56:../Sources/InputTask.c **** 	uint32_t event_bits;
  57:../Sources/InputTask.c **** 	APPLICATION_MESSAGE *msg;
  58:../Sources/InputTask.c **** 	
  59:../Sources/InputTask.c **** 	/* Lab 5 variables */
  60:../Sources/InputTask.c **** 	LWGPIO_STRUCT sw1, sw2;
  61:../Sources/InputTask.c **** //	LWGPIO_VALUE sw1_value, sw2_value;
  62:../Sources/InputTask.c **** //	LWGPIO_VALUE sw1_last_value = LWGPIO_VALUE_HIGH,
  63:../Sources/InputTask.c **** //				 sw2_last_value = LWGPIO_VALUE_HIGH; // retain the previous value of each switch
  64:../Sources/InputTask.c **** 	
  65:../Sources/InputTask.c **** 	/* Lab 8 vars */
  66:../Sources/InputTask.c **** 	LWTIMER_PERIOD_STRUCT period;
  67:../Sources/InputTask.c **** 	LWTIMER_STRUCT timer;
  68:../Sources/InputTask.c **** 	
  69:../Sources/InputTask.c **** 	/* Lab 9 vars */
  70:../Sources/InputTask.c **** 	LWADC_STRUCT adc1_pot;
  71:../Sources/InputTask.c **** 	LWADC_VALUE voltage;
  72:../Sources/InputTask.c **** 	
  73:../Sources/InputTask.c **** 	init_switch(&sw1, BSP_SW1, BSP_SW1_MUX_GPIO, sw1_isr);
  48              		.loc 1 73 0
  49 0008 07F17403 		add	r3, r7, #116
  50 000c 1846     		mov	r0, r3
  51 000e 4FF01301 		mov	r1, #19
  52 0012 C8F20001 		movt	r1, 32768
  53 0016 4FF00102 		mov	r2, #1
  54 001a 40F20003 		movw	r3, #:lower16:sw1_isr
  55 001e C0F20003 		movt	r3, #:upper16:sw1_isr
  56 0022 FFF7FEFF 		bl	init_switch
  74:../Sources/InputTask.c **** 	init_switch(&sw2, BSP_SW2, BSP_SW2_MUX_GPIO, sw2_isr);	
  57              		.loc 1 74 0
  58 0026 07F16403 		add	r3, r7, #100
  59 002a 1846     		mov	r0, r3
  60 002c 4FF09A01 		mov	r1, #154
  61 0030 C8F20001 		movt	r1, 32768
  62 0034 4FF00102 		mov	r2, #1
  63 0038 40F20003 		movw	r3, #:lower16:sw2_isr
  64 003c C0F20003 		movt	r3, #:upper16:sw2_isr
  65 0040 FFF7FEFF 		bl	init_switch
  75:../Sources/InputTask.c **** 	
  76:../Sources/InputTask.c **** 	/* Lab 9 init adc */
  77:../Sources/InputTask.c **** 	_lwadc_init(&BSP_DEFAULT_LWADC_MODULE);
  66              		.loc 1 77 0
  67 0044 40F20000 		movw	r0, #:lower16:lwadc1_init
  68 0048 C0F20000 		movt	r0, #:upper16:lwadc1_init
  69 004c FFF7FEFF 		bl	_lwadc_init
  78:../Sources/InputTask.c **** 	_lwadc_init_input(&adc1_pot,BSP_ADC_POTENTIOMETER);
  70              		.loc 1 78 0
  71 0050 07F10C03 		add	r3, r7, #12
  72 0054 1846     		mov	r0, r3
  73 0056 42F21401 		movw	r1, #8212
  74 005a FFF7FEFF 		bl	_lwadc_init_input
  79:../Sources/InputTask.c **** 	_lwadc_set_attribute(&adc1_pot, LWADC_NUMERATOR, 12000);
  75              		.loc 1 79 0
  76 005e 07F10C03 		add	r3, r7, #12
  77 0062 1846     		mov	r0, r3
  78 0064 4FF00701 		mov	r1, #7
  79 0068 42F6E062 		movw	r2, #12000
  80 006c FFF7FEFF 		bl	_lwadc_set_attribute
  80:../Sources/InputTask.c **** 	
  81:../Sources/InputTask.c **** 	health_qid = _msgq_get_id(0, HEALTH_QUEUE);
  81              		.loc 1 81 0
  82 0070 4FF00000 		mov	r0, #0
  83 0074 4FF00101 		mov	r1, #1
  84 0078 FFF7FEFF 		bl	_msgq_get_id
  85 007c 0346     		mov	r3, r0
  86 007e A7F88E30 		strh	r3, [r7, #142]	@ movhi
  82:../Sources/InputTask.c **** 	
  83:../Sources/InputTask.c **** 	/* Lab 7 - init LW event */
  84:../Sources/InputTask.c **** 	_lwevent_create(&lwevent_group,LWEVENT_AUTO_CLEAR);
  87              		.loc 1 84 0
  88 0082 40F20000 		movw	r0, #:lower16:lwevent_group
  89 0086 C0F20000 		movt	r0, #:upper16:lwevent_group
  90 008a 4FF00101 		mov	r1, #1
  91 008e FFF7FEFF 		bl	_lwevent_create
  85:../Sources/InputTask.c **** 	
  86:../Sources/InputTask.c **** 	/* Lab 8 - init */
  87:../Sources/InputTask.c **** 	_lwtimer_create_periodic_queue(&period, BSP_ALARM_FREQUENCY/10,0);
  92              		.loc 1 87 0
  93 0092 07F13C03 		add	r3, r7, #60
  94 0096 1846     		mov	r0, r3
  95 0098 4FF01401 		mov	r1, #20
  96 009c 4FF00002 		mov	r2, #0
  97 00a0 FFF7FEFF 		bl	_lwtimer_create_periodic_queue
  88:../Sources/InputTask.c **** 	//period = 10Hz, 1/10th of a second expiry
  89:../Sources/InputTask.c **** 	 	
  90:../Sources/InputTask.c **** 	/* call adc_timer_isr with no parameters when timer expires */
  91:../Sources/InputTask.c **** 	_lwtimer_add_timer_to_queue(&period, &timer, 0, adc_timer_isr, NULL);
  98              		.loc 1 91 0
  99 00a4 07F13C02 		add	r2, r7, #60
 100 00a8 07F12003 		add	r3, r7, #32
 101 00ac 4FF00001 		mov	r1, #0
 102 00b0 0091     		str	r1, [sp, #0]
 103 00b2 1046     		mov	r0, r2
 104 00b4 1946     		mov	r1, r3
 105 00b6 4FF00002 		mov	r2, #0
 106 00ba 40F20003 		movw	r3, #:lower16:adc_timer_isr
 107 00be C0F20003 		movt	r3, #:upper16:adc_timer_isr
 108 00c2 FFF7FEFF 		bl	_lwtimer_add_timer_to_queue
  92:../Sources/InputTask.c **** 	//_lwtimer_add_timer_to_queue(&period, &timer, 0, adc_timer_isr, 0);
  93:../Sources/InputTask.c **** 	
  94:../Sources/InputTask.c **** 	printf("\n Input task started \n"); 
 109              		.loc 1 94 0
 110 00c6 40F20000 		movw	r0, #:lower16:.LC0
 111 00ca C0F20000 		movt	r0, #:upper16:.LC0
 112 00ce FFF7FEFF 		bl	_io_printf
  95:../Sources/InputTask.c **** 	
  96:../Sources/InputTask.c **** 	TSI_Start();
 113              		.loc 1 96 0
 114 00d2 FFF7FEFF 		bl	TSI_Start
 115              	.L11:
  97:../Sources/InputTask.c **** 	
  98:../Sources/InputTask.c **** 	while(1){		
  99:../Sources/InputTask.c **** 		
 100:../Sources/InputTask.c **** 		/* Lab 7 - wait for event bits indefinitely */
 101:../Sources/InputTask.c **** 		_lwevent_wait_ticks(&lwevent_group, SW1_EVENT | SW2_EVENT | ADC_TIMER_EVENT
 116              		.loc 1 101 0
 117 00d6 40F20000 		movw	r0, #:lower16:lwevent_group
 118 00da C0F20000 		movt	r0, #:upper16:lwevent_group
 119 00de 4FF07F01 		mov	r1, #127
 120 00e2 4FF00002 		mov	r2, #0
 121 00e6 4FF00003 		mov	r3, #0
 122 00ea FFF7FEFF 		bl	_lwevent_wait_ticks
 102:../Sources/InputTask.c **** 				| TOUCH1_EVENT | TOUCH2_EVENT | TOUCH3_EVENT | TOUCH4_EVENT, FALSE, 0);
 103:../Sources/InputTask.c **** 		
 104:../Sources/InputTask.c **** 		/* Lab 7 - input task needs to know which bit was set */
 105:../Sources/InputTask.c **** 		event_bits = _lwevent_get_signalled();
 123              		.loc 1 105 0
 124 00ee FFF7FEFF 		bl	_lwevent_get_signalled
 125 00f2 C7F88800 		str	r0, [r7, #136]
 106:../Sources/InputTask.c **** 		
 107:../Sources/InputTask.c **** 		if (event_bits & ADC_TIMER_EVENT) {
 126              		.loc 1 107 0
 127 00f6 D7F88830 		ldr	r3, [r7, #136]
 128 00fa 03F00403 		and	r3, r3, #4
 129 00fe 002B     		cmp	r3, #0
 130 0100 26D0     		beq	.L2
 108:../Sources/InputTask.c **** 			if(_lwadc_read(&adc1_pot, &voltage)){	
 131              		.loc 1 108 0
 132 0102 07F10C02 		add	r2, r7, #12
 133 0106 07F10803 		add	r3, r7, #8
 134 010a 1046     		mov	r0, r2
 135 010c 1946     		mov	r1, r3
 136 010e FFF7FEFF 		bl	_lwadc_read
 137 0112 0346     		mov	r3, r0
 138 0114 002B     		cmp	r3, #0
 139 0116 1BD0     		beq	.L2
 109:../Sources/InputTask.c **** 				
 110:../Sources/InputTask.c **** 				msg = _msg_alloc_system(sizeof(*msg));
 140              		.loc 1 110 0
 141 0118 4FF01000 		mov	r0, #16
 142 011c FFF7FEFF 		bl	_msg_alloc_system
 143 0120 C7F88400 		str	r0, [r7, #132]
 111:../Sources/InputTask.c **** 				
 112:../Sources/InputTask.c **** 				if (msg != NULL ) {
 144              		.loc 1 112 0
 145 0124 D7F88430 		ldr	r3, [r7, #132]
 146 0128 002B     		cmp	r3, #0
 147 012a 11D0     		beq	.L2
 113:../Sources/InputTask.c **** 					msg->HEADER.TARGET_QID = health_qid;
 148              		.loc 1 113 0
 149 012c D7F88430 		ldr	r3, [r7, #132]
 150 0130 B7F88E20 		ldrh	r2, [r7, #142]	@ movhi
 151 0134 5A80     		strh	r2, [r3, #2]	@ movhi
 114:../Sources/InputTask.c **** 					msg->MESSAGE_TYPE = ADC_READ_MESSAGE;
 152              		.loc 1 114 0
 153 0136 D7F88430 		ldr	r3, [r7, #132]
 154 013a 4FF00502 		mov	r2, #5
 155 013e 1A72     		strb	r2, [r3, #8]
 115:../Sources/InputTask.c **** 					msg->DATA = voltage;
 156              		.loc 1 115 0
 157 0140 BA68     		ldr	r2, [r7, #8]
 158 0142 D7F88430 		ldr	r3, [r7, #132]
 159 0146 DA60     		str	r2, [r3, #12]
 116:../Sources/InputTask.c **** 					_msgq_send(msg);
 160              		.loc 1 116 0
 161 0148 D7F88400 		ldr	r0, [r7, #132]
 162 014c FFF7FEFF 		bl	_msgq_send
 163              	.L2:
 117:../Sources/InputTask.c **** 				}
 118:../Sources/InputTask.c **** 			}
 119:../Sources/InputTask.c **** 		}	
 120:../Sources/InputTask.c **** 		
 121:../Sources/InputTask.c **** 		if(event_bits & SW1_EVENT){
 164              		.loc 1 121 0
 165 0150 D7F88830 		ldr	r3, [r7, #136]
 166 0154 03F00103 		and	r3, r3, #1
 167 0158 002B     		cmp	r3, #0
 168 015a 1CD0     		beq	.L3
 122:../Sources/InputTask.c **** 			//_lwevent_clear(&lwevent_group, SW1_EVENT);
 123:../Sources/InputTask.c **** 			msg = _msg_alloc_system(sizeof(*msg));			
 169              		.loc 1 123 0
 170 015c 4FF01000 		mov	r0, #16
 171 0160 FFF7FEFF 		bl	_msg_alloc_system
 172 0164 C7F88400 		str	r0, [r7, #132]
 124:../Sources/InputTask.c **** 			if (msg != NULL ) {
 173              		.loc 1 124 0
 174 0168 D7F88430 		ldr	r3, [r7, #132]
 175 016c 002B     		cmp	r3, #0
 176 016e 12D0     		beq	.L3
 125:../Sources/InputTask.c **** 				msg->HEADER.TARGET_QID = health_qid;
 177              		.loc 1 125 0
 178 0170 D7F88430 		ldr	r3, [r7, #132]
 179 0174 B7F88E20 		ldrh	r2, [r7, #142]	@ movhi
 180 0178 5A80     		strh	r2, [r3, #2]	@ movhi
 126:../Sources/InputTask.c **** 				msg->MESSAGE_TYPE = SW1_Message;
 181              		.loc 1 126 0
 182 017a D7F88430 		ldr	r3, [r7, #132]
 183 017e 4FF00302 		mov	r2, #3
 184 0182 1A72     		strb	r2, [r3, #8]
 127:../Sources/InputTask.c **** 				msg->DATA = 0;
 185              		.loc 1 127 0
 186 0184 D7F88430 		ldr	r3, [r7, #132]
 187 0188 4FF00002 		mov	r2, #0
 188 018c DA60     		str	r2, [r3, #12]
 128:../Sources/InputTask.c **** 				
 129:../Sources/InputTask.c **** 				_msgq_send(msg);
 189              		.loc 1 129 0
 190 018e D7F88400 		ldr	r0, [r7, #132]
 191 0192 FFF7FEFF 		bl	_msgq_send
 192              	.L3:
 130:../Sources/InputTask.c **** 			}
 131:../Sources/InputTask.c **** 		}		
 132:../Sources/InputTask.c **** 		if(event_bits & SW2_EVENT){
 193              		.loc 1 132 0
 194 0196 D7F88830 		ldr	r3, [r7, #136]
 195 019a 03F00203 		and	r3, r3, #2
 196 019e 002B     		cmp	r3, #0
 197 01a0 1CD0     		beq	.L4
 133:../Sources/InputTask.c **** 			msg = _msg_alloc_system(sizeof(*msg));
 198              		.loc 1 133 0
 199 01a2 4FF01000 		mov	r0, #16
 200 01a6 FFF7FEFF 		bl	_msg_alloc_system
 201 01aa C7F88400 		str	r0, [r7, #132]
 134:../Sources/InputTask.c **** 			if (msg != NULL ) {
 202              		.loc 1 134 0
 203 01ae D7F88430 		ldr	r3, [r7, #132]
 204 01b2 002B     		cmp	r3, #0
 205 01b4 12D0     		beq	.L4
 135:../Sources/InputTask.c **** 				msg->HEADER.TARGET_QID = health_qid;
 206              		.loc 1 135 0
 207 01b6 D7F88430 		ldr	r3, [r7, #132]
 208 01ba B7F88E20 		ldrh	r2, [r7, #142]	@ movhi
 209 01be 5A80     		strh	r2, [r3, #2]	@ movhi
 136:../Sources/InputTask.c **** 				msg->MESSAGE_TYPE = SW2_Message;
 210              		.loc 1 136 0
 211 01c0 D7F88430 		ldr	r3, [r7, #132]
 212 01c4 4FF00402 		mov	r2, #4
 213 01c8 1A72     		strb	r2, [r3, #8]
 137:../Sources/InputTask.c **** 				msg->DATA = 0;				
 214              		.loc 1 137 0
 215 01ca D7F88430 		ldr	r3, [r7, #132]
 216 01ce 4FF00002 		mov	r2, #0
 217 01d2 DA60     		str	r2, [r3, #12]
 138:../Sources/InputTask.c **** 				_msgq_send(msg);
 218              		.loc 1 138 0
 219 01d4 D7F88400 		ldr	r0, [r7, #132]
 220 01d8 FFF7FEFF 		bl	_msgq_send
 221              	.L4:
 139:../Sources/InputTask.c **** 			}
 140:../Sources/InputTask.c **** 		}	
 141:../Sources/InputTask.c **** 		if(event_bits & (TOUCH1_EVENT | TOUCH2_EVENT | TOUCH3_EVENT | TOUCH4_EVENT))
 222              		.loc 1 141 0
 223 01dc D7F88830 		ldr	r3, [r7, #136]
 224 01e0 03F07803 		and	r3, r3, #120
 225 01e4 002B     		cmp	r3, #0
 226 01e6 4CD0     		beq	.L5
 142:../Sources/InputTask.c **** 		{
 143:../Sources/InputTask.c **** 			msg = _msg_alloc_system(sizeof(*msg));
 227              		.loc 1 143 0
 228 01e8 4FF01000 		mov	r0, #16
 229 01ec FFF7FEFF 		bl	_msg_alloc_system
 230 01f0 C7F88400 		str	r0, [r7, #132]
 144:../Sources/InputTask.c **** 			if (msg != NULL ) {
 231              		.loc 1 144 0
 232 01f4 D7F88430 		ldr	r3, [r7, #132]
 233 01f8 002B     		cmp	r3, #0
 234 01fa 42D0     		beq	.L5
 145:../Sources/InputTask.c **** 				msg->HEADER.TARGET_QID = health_qid;
 235              		.loc 1 145 0
 236 01fc D7F88430 		ldr	r3, [r7, #132]
 237 0200 B7F88E20 		ldrh	r2, [r7, #142]	@ movhi
 238 0204 5A80     		strh	r2, [r3, #2]	@ movhi
 146:../Sources/InputTask.c **** 				msg->MESSAGE_TYPE = TOUCH_MESSAGE;
 239              		.loc 1 146 0
 240 0206 D7F88430 		ldr	r3, [r7, #132]
 241 020a 4FF00602 		mov	r2, #6
 242 020e 1A72     		strb	r2, [r3, #8]
 147:../Sources/InputTask.c **** 				if(event_bits & TOUCH1_EVENT)
 243              		.loc 1 147 0
 244 0210 D7F88830 		ldr	r3, [r7, #136]
 245 0214 03F00803 		and	r3, r3, #8
 246 0218 002B     		cmp	r3, #0
 247 021a 05D0     		beq	.L6
 148:../Sources/InputTask.c **** 					msg->DATA = 1;	
 248              		.loc 1 148 0
 249 021c D7F88430 		ldr	r3, [r7, #132]
 250 0220 4FF00102 		mov	r2, #1
 251 0224 DA60     		str	r2, [r3, #12]
 252 0226 28E0     		b	.L7
 253              	.L6:
 149:../Sources/InputTask.c **** 				else if(event_bits & TOUCH2_EVENT)
 254              		.loc 1 149 0
 255 0228 D7F88830 		ldr	r3, [r7, #136]
 256 022c 03F01003 		and	r3, r3, #16
 257 0230 002B     		cmp	r3, #0
 258 0232 05D0     		beq	.L8
 150:../Sources/InputTask.c **** 					msg->DATA = 2;
 259              		.loc 1 150 0
 260 0234 D7F88430 		ldr	r3, [r7, #132]
 261 0238 4FF00202 		mov	r2, #2
 262 023c DA60     		str	r2, [r3, #12]
 263 023e 1CE0     		b	.L7
 264              	.L8:
 151:../Sources/InputTask.c **** 				else if(event_bits & TOUCH3_EVENT)
 265              		.loc 1 151 0
 266 0240 D7F88830 		ldr	r3, [r7, #136]
 267 0244 03F02003 		and	r3, r3, #32
 268 0248 002B     		cmp	r3, #0
 269 024a 05D0     		beq	.L9
 152:../Sources/InputTask.c **** 					msg->DATA = 3;
 270              		.loc 1 152 0
 271 024c D7F88430 		ldr	r3, [r7, #132]
 272 0250 4FF00302 		mov	r2, #3
 273 0254 DA60     		str	r2, [r3, #12]
 274 0256 10E0     		b	.L7
 275              	.L9:
 153:../Sources/InputTask.c **** 				else if(event_bits & TOUCH4_EVENT)
 276              		.loc 1 153 0
 277 0258 D7F88830 		ldr	r3, [r7, #136]
 278 025c 03F04003 		and	r3, r3, #64
 279 0260 002B     		cmp	r3, #0
 280 0262 05D0     		beq	.L10
 154:../Sources/InputTask.c **** 					msg->DATA = 4;
 281              		.loc 1 154 0
 282 0264 D7F88430 		ldr	r3, [r7, #132]
 283 0268 4FF00402 		mov	r2, #4
 284 026c DA60     		str	r2, [r3, #12]
 285 026e 04E0     		b	.L7
 286              	.L10:
 155:../Sources/InputTask.c **** 				else
 156:../Sources/InputTask.c **** 					msg->DATA = 0; //ERROR 
 287              		.loc 1 156 0
 288 0270 D7F88430 		ldr	r3, [r7, #132]
 289 0274 4FF00002 		mov	r2, #0
 290 0278 DA60     		str	r2, [r3, #12]
 291              	.L7:
 157:../Sources/InputTask.c **** 				
 158:../Sources/InputTask.c **** 				_msgq_send(msg);
 292              		.loc 1 158 0
 293 027a D7F88400 		ldr	r0, [r7, #132]
 294 027e FFF7FEFF 		bl	_msgq_send
 295              	.L5:
 159:../Sources/InputTask.c **** 			}			
 160:../Sources/InputTask.c **** 		}
 161:../Sources/InputTask.c **** 		
 162:../Sources/InputTask.c **** 		_time_delay(100); 			
 296              		.loc 1 162 0
 297 0282 4FF06400 		mov	r0, #100
 298 0286 FFF7FEFF 		bl	_time_delay
 163:../Sources/InputTask.c **** 	}    
 299              		.loc 1 163 0
 300 028a 24E7     		b	.L11
 301              		.cfi_endproc
 302              	.LFE0:
 304              		.section	.text.adc_timer_isr,"ax",%progbits
 305              		.align	2
 306              		.global	adc_timer_isr
 307              		.thumb
 308              		.thumb_func
 310              	adc_timer_isr:
 311              	.LFB1:
 164:../Sources/InputTask.c **** }
 165:../Sources/InputTask.c **** /* Called every 1/10s when timer expires */
 166:../Sources/InputTask.c **** void adc_timer_isr(void){
 312              		.loc 1 166 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 1, uses_anonymous_args = 0
 316 0000 80B5     		push	{r7, lr}
 317              	.LCFI3:
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 7, -8
 320              		.cfi_offset 14, -4
 321 0002 00AF     		add	r7, sp, #0
 322              	.LCFI4:
 323              		.cfi_def_cfa_register 7
 167:../Sources/InputTask.c **** 	
 168:../Sources/InputTask.c **** 	_lwevent_set(&lwevent_group, ADC_TIMER_EVENT); //Set event bit
 324              		.loc 1 168 0
 325 0004 40F20000 		movw	r0, #:lower16:lwevent_group
 326 0008 C0F20000 		movt	r0, #:upper16:lwevent_group
 327 000c 4FF00401 		mov	r1, #4
 328 0010 FFF7FEFF 		bl	_lwevent_set
 169:../Sources/InputTask.c **** }
 329              		.loc 1 169 0
 330 0014 80BD     		pop	{r7, pc}
 331              		.cfi_endproc
 332              	.LFE1:
 334 0016 00BF     		.section	.text.init_switch,"ax",%progbits
 335              		.align	2
 336              		.global	init_switch
 337              		.thumb
 338              		.thumb_func
 340              	init_switch:
 341              	.LFB2:
 170:../Sources/InputTask.c **** 
 171:../Sources/InputTask.c **** 
 172:../Sources/InputTask.c **** void init_switch(LWGPIO_STRUCT_PTR sw,
 173:../Sources/InputTask.c **** 		LWGPIO_PIN_ID pin,
 174:../Sources/InputTask.c **** 		uint32_t mux,
 175:../Sources/InputTask.c **** 		INT_ISR_FPTR sw_isr
 176:../Sources/InputTask.c **** 		)
 177:../Sources/InputTask.c **** {
 342              		.loc 1 177 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 16
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346 0000 80B5     		push	{r7, lr}
 347              	.LCFI5:
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 7, -8
 350              		.cfi_offset 14, -4
 351 0002 84B0     		sub	sp, sp, #16
 352              	.LCFI6:
 353              		.cfi_def_cfa_offset 24
 354 0004 00AF     		add	r7, sp, #0
 355              	.LCFI7:
 356              		.cfi_def_cfa_register 7
 357 0006 F860     		str	r0, [r7, #12]
 358 0008 B960     		str	r1, [r7, #8]
 359 000a 7A60     		str	r2, [r7, #4]
 360 000c 3B60     		str	r3, [r7, #0]
 178:../Sources/InputTask.c **** 	/* Initialize input pins */
 179:../Sources/InputTask.c **** 	lwgpio_init( sw, pin, LWGPIO_DIR_INPUT, LWGPIO_VALUE_NOCHANGE );
 361              		.loc 1 179 0
 362 000e F868     		ldr	r0, [r7, #12]
 363 0010 B968     		ldr	r1, [r7, #8]
 364 0012 4FF00002 		mov	r2, #0
 365 0016 4FF00203 		mov	r3, #2
 366 001a FFF7FEFF 		bl	lwgpio_init
 180:../Sources/InputTask.c **** 	
 181:../Sources/InputTask.c **** 	/* Set functionality/pin muxing  */
 182:../Sources/InputTask.c **** 	lwgpio_set_functionality( sw, mux );
 367              		.loc 1 182 0
 368 001e F868     		ldr	r0, [r7, #12]
 369 0020 7968     		ldr	r1, [r7, #4]
 370 0022 FFF7FEFF 		bl	lwgpio_set_functionality
 183:../Sources/InputTask.c **** 	
 184:../Sources/InputTask.c **** 	/* Pull up push button lines so that they are not floating, since switch drives to gnd */
 185:../Sources/InputTask.c **** 	lwgpio_set_attribute( sw, LWGPIO_ATTR_PULL_UP, LWGPIO_AVAL_ENABLE );
 371              		.loc 1 185 0
 372 0026 F868     		ldr	r0, [r7, #12]
 373 0028 4FF00101 		mov	r1, #1
 374 002c 4FF00102 		mov	r2, #1
 375 0030 FFF7FEFF 		bl	lwgpio_set_attribute
 186:../Sources/InputTask.c **** 	
 187:../Sources/InputTask.c **** 	/* Initialize an interrupt */
 188:../Sources/InputTask.c **** 	lwgpio_int_init( sw, LWGPIO_INT_MODE_FALLING);
 376              		.loc 1 188 0
 377 0034 F868     		ldr	r0, [r7, #12]
 378 0036 4FF00201 		mov	r1, #2
 379 003a FFF7FEFF 		bl	lwgpio_int_init
 189:../Sources/InputTask.c **** 	
 190:../Sources/InputTask.c **** 	/* Install the switch specific ISR */
 191:../Sources/InputTask.c **** 	_int_install_isr( lwgpio_int_get_vector(sw), sw_isr, sw);
 380              		.loc 1 191 0
 381 003e F868     		ldr	r0, [r7, #12]
 382 0040 FFF7FEFF 		bl	lwgpio_int_get_vector
 383 0044 0346     		mov	r3, r0
 384 0046 1846     		mov	r0, r3
 385 0048 3968     		ldr	r1, [r7, #0]
 386 004a FA68     		ldr	r2, [r7, #12]
 387 004c FFF7FEFF 		bl	_int_install_isr
 192:../Sources/InputTask.c **** 	
 193:../Sources/InputTask.c **** 	/* Enabling an ISR in the GPIO device */
 194:../Sources/InputTask.c **** 	lwgpio_int_enable( sw, TRUE);
 388              		.loc 1 194 0
 389 0050 F868     		ldr	r0, [r7, #12]
 390 0052 4FF00101 		mov	r1, #1
 391 0056 FFF7FEFF 		bl	lwgpio_int_enable
 195:../Sources/InputTask.c **** 	
 196:../Sources/InputTask.c **** 	/* 4 = main priority, 0 = sub level priority */
 197:../Sources/InputTask.c **** 	_bsp_int_init( lwgpio_int_get_vector(sw), 4, 0, TRUE);
 392              		.loc 1 197 0
 393 005a F868     		ldr	r0, [r7, #12]
 394 005c FFF7FEFF 		bl	lwgpio_int_get_vector
 395 0060 0346     		mov	r3, r0
 396 0062 1846     		mov	r0, r3
 397 0064 4FF00401 		mov	r1, #4
 398 0068 4FF00102 		mov	r2, #1
 399 006c FFF7FEFF 		bl	_nvic_int_init
 198:../Sources/InputTask.c **** }
 400              		.loc 1 198 0
 401 0070 07F11007 		add	r7, r7, #16
 402 0074 BD46     		mov	sp, r7
 403 0076 80BD     		pop	{r7, pc}
 404              		.cfi_endproc
 405              	.LFE2:
 407              		.section	.text.sw1_isr,"ax",%progbits
 408              		.align	2
 409              		.global	sw1_isr
 410              		.thumb
 411              		.thumb_func
 413              	sw1_isr:
 414              	.LFB3:
 199:../Sources/InputTask.c **** 
 200:../Sources/InputTask.c **** void sw1_isr(void * param) {
 415              		.loc 1 200 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 16
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419 0000 80B5     		push	{r7, lr}
 420              	.LCFI8:
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0002 84B0     		sub	sp, sp, #16
 425              	.LCFI9:
 426              		.cfi_def_cfa_offset 24
 427 0004 00AF     		add	r7, sp, #0
 428              	.LCFI10:
 429              		.cfi_def_cfa_register 7
 430 0006 7860     		str	r0, [r7, #4]
 201:../Sources/InputTask.c **** 
 202:../Sources/InputTask.c **** 	LWGPIO_STRUCT_PTR sw = (LWGPIO_STRUCT_PTR) param;
 431              		.loc 1 202 0
 432 0008 7B68     		ldr	r3, [r7, #4]
 433 000a FB60     		str	r3, [r7, #12]
 203:../Sources/InputTask.c **** 	//APPLICATION_MESSAGE *msg;
 204:../Sources/InputTask.c **** 
 205:../Sources/InputTask.c **** 	lwgpio_int_clear_flag(sw);
 434              		.loc 1 205 0
 435 000c F868     		ldr	r0, [r7, #12]
 436 000e FFF7FEFF 		bl	lwgpio_int_clear_flag
 206:../Sources/InputTask.c **** 	
 207:../Sources/InputTask.c **** 	/* Lab 7 - shorten ISR */
 208:../Sources/InputTask.c **** 	_lwevent_set(&lwevent_group, SW1_EVENT);
 437              		.loc 1 208 0
 438 0012 40F20000 		movw	r0, #:lower16:lwevent_group
 439 0016 C0F20000 		movt	r0, #:upper16:lwevent_group
 440 001a 4FF00101 		mov	r1, #1
 441 001e FFF7FEFF 		bl	_lwevent_set
 209:../Sources/InputTask.c **** 	
 210:../Sources/InputTask.c **** 
 211:../Sources/InputTask.c **** 	/*
 212:../Sources/InputTask.c **** 	msg = _msg_alloc_system(sizeof(*msg));	
 213:../Sources/InputTask.c **** 	if (msg != NULL ) {
 214:../Sources/InputTask.c **** 		msg->HEADER.TARGET_QID =_msgq_get_id(0, HEALTH_QUEUE);
 215:../Sources/InputTask.c **** 		msg->MESSAGE_TYPE = SW1_Message;
 216:../Sources/InputTask.c **** 		msg->DATA = 0;
 217:../Sources/InputTask.c **** 		_msgq_send(msg);
 218:../Sources/InputTask.c **** 	}*/
 219:../Sources/InputTask.c **** }
 442              		.loc 1 219 0
 443 0022 07F11007 		add	r7, r7, #16
 444 0026 BD46     		mov	sp, r7
 445 0028 80BD     		pop	{r7, pc}
 446              		.cfi_endproc
 447              	.LFE3:
 449 002a 00BF     		.section	.text.sw2_isr,"ax",%progbits
 450              		.align	2
 451              		.global	sw2_isr
 452              		.thumb
 453              		.thumb_func
 455              	sw2_isr:
 456              	.LFB4:
 220:../Sources/InputTask.c **** 
 221:../Sources/InputTask.c **** void sw2_isr(void * param) {
 457              		.loc 1 221 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 16
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461 0000 80B5     		push	{r7, lr}
 462              	.LCFI11:
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 7, -8
 465              		.cfi_offset 14, -4
 466 0002 84B0     		sub	sp, sp, #16
 467              	.LCFI12:
 468              		.cfi_def_cfa_offset 24
 469 0004 00AF     		add	r7, sp, #0
 470              	.LCFI13:
 471              		.cfi_def_cfa_register 7
 472 0006 7860     		str	r0, [r7, #4]
 222:../Sources/InputTask.c **** 
 223:../Sources/InputTask.c **** 	LWGPIO_STRUCT_PTR sw = (LWGPIO_STRUCT_PTR) param;
 473              		.loc 1 223 0
 474 0008 7B68     		ldr	r3, [r7, #4]
 475 000a FB60     		str	r3, [r7, #12]
 224:../Sources/InputTask.c **** 
 225:../Sources/InputTask.c **** 	lwgpio_int_clear_flag(sw);
 476              		.loc 1 225 0
 477 000c F868     		ldr	r0, [r7, #12]
 478 000e FFF7FEFF 		bl	lwgpio_int_clear_flag
 226:../Sources/InputTask.c **** 	_lwevent_set(&lwevent_group, SW2_EVENT);	
 479              		.loc 1 226 0
 480 0012 40F20000 		movw	r0, #:lower16:lwevent_group
 481 0016 C0F20000 		movt	r0, #:upper16:lwevent_group
 482 001a 4FF00201 		mov	r1, #2
 483 001e FFF7FEFF 		bl	_lwevent_set
 227:../Sources/InputTask.c **** }
 484              		.loc 1 227 0
 485 0022 07F11007 		add	r7, r7, #16
 486 0026 BD46     		mov	sp, r7
 487 0028 80BD     		pop	{r7, pc}
 488              		.cfi_endproc
 489              	.LFE4:
 491 002a 00BF     		.text
 492              	.Letext0:
 493              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 494              		.file 3 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/psptypes.h"
 495              		.file 4 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/bsp/mqx.h"
 496              		.file 5 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/queue.h"
 497              		.file 6 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/MK60DZ10.h"
 498              		.file 7 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/lwtimer.h"
 499              		.file 8 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/bsp/lwgpio_kgpio.h"
 500              		.file 9 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/bsp/lwgpio.h"
 501              		.file 10 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/lwevent.h"
 502              		.file 11 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/bsp/lwadc_kadc.h"
 503              		.file 12 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/message.h"
 504              		.file 13 "../Sources/main.h"
DEFINED SYMBOLS
                            *ABS*:00000000 InputTask.c
                            *COM*:00000024 lwevent_group
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:20     .rodata:00000000 $d
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:21     .rodata:00000000 .LC0
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:24     .text.Input_task:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:29     .text.Input_task:00000000 Input_task
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:413    .text.sw1_isr:00000000 sw1_isr
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:340    .text.init_switch:00000000 init_switch
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:455    .text.sw2_isr:00000000 sw2_isr
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:310    .text.adc_timer_isr:00000000 adc_timer_isr
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:305    .text.adc_timer_isr:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:335    .text.init_switch:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:408    .text.sw1_isr:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccOgz2LJ.s:450    .text.sw2_isr:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
lwadc1_init
_lwadc_init
_lwadc_init_input
_lwadc_set_attribute
_msgq_get_id
_lwevent_create
_lwtimer_create_periodic_queue
_lwtimer_add_timer_to_queue
_io_printf
TSI_Start
_lwevent_wait_ticks
_lwevent_get_signalled
_lwadc_read
_msg_alloc_system
_msgq_send
_time_delay
_lwevent_set
lwgpio_init
lwgpio_set_functionality
lwgpio_set_attribute
lwgpio_int_init
lwgpio_int_get_vector
_int_install_isr
lwgpio_int_enable
_nvic_int_init
lwgpio_int_clear_flag
