   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"AccelTask.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	fd,4,4
  19              		.comm	recv_buffer,5,4
  20              		.comm	Sensor,7,4
  21              		.section	.text.Accel_task,"ax",%progbits
  22              		.align	2
  23              		.global	Accel_task
  24              		.thumb
  25              		.thumb_func
  27              	Accel_task:
  28              	.LFB0:
  29              		.file 1 "../Sources/AccelTask.c"
   1:../Sources/AccelTask.c **** /*
   2:../Sources/AccelTask.c ****  * AccelTask.c
   3:../Sources/AccelTask.c ****  *
   4:../Sources/AccelTask.c ****  *  Created on: Feb 6, 2014
   5:../Sources/AccelTask.c ****  *      Author: Embedded Access Inc
   6:../Sources/AccelTask.c ****  */
   7:../Sources/AccelTask.c **** 
   8:../Sources/AccelTask.c **** #include "main.h"
   9:../Sources/AccelTask.c **** #include <i2c.h>
  10:../Sources/AccelTask.c **** 
  11:../Sources/AccelTask.c **** #define I2C_ACCELEROMETER_ADDRESS   0x4C      //MMA7660
  12:../Sources/AccelTask.c **** #define I2C_DATA_SIZE               5
  13:../Sources/AccelTask.c **** 
  14:../Sources/AccelTask.c **** 
  15:../Sources/AccelTask.c **** FILE_PTR fd;
  16:../Sources/AccelTask.c **** unsigned char recv_buffer[I2C_DATA_SIZE];
  17:../Sources/AccelTask.c **** 
  18:../Sources/AccelTask.c **** void write_I2C(int i2c_device, unsigned char reg, unsigned char value);
  19:../Sources/AccelTask.c **** void read_I2C(int i2c_device, int sensor, int length);
  20:../Sources/AccelTask.c **** //void print_accelerometer_data();
  21:../Sources/AccelTask.c **** signed char convert_accel_data(signed char input);
  22:../Sources/AccelTask.c **** void InitializeI2C();
  23:../Sources/AccelTask.c **** void InitializeMMA7660();
  24:../Sources/AccelTask.c **** 
  25:../Sources/AccelTask.c **** SENSOR_DATA Sensor;
  26:../Sources/AccelTask.c **** 
  27:../Sources/AccelTask.c **** /*TASK*-----------------------------------------------------
  28:../Sources/AccelTask.c **** * 
  29:../Sources/AccelTask.c **** * Task Name    : Accel_task
  30:../Sources/AccelTask.c **** * Comments     :
  31:../Sources/AccelTask.c **** *    This is the Accelerometer task
  32:../Sources/AccelTask.c **** *    From TWR-K60N512-UM User Manual v1.1
  33:../Sources/AccelTask.c **** *    Accelerometer:
  34:../Sources/AccelTask.c **** *    I2C SDA -> PTD9 = I2C0_SDA
  35:../Sources/AccelTask.c **** *    I2C SCL -> PTD8 = I2C0_SCL
  36:../Sources/AccelTask.c **** *    IRQ     -> PTD10 = PTD10    
  37:../Sources/AccelTask.c **** *
  38:../Sources/AccelTask.c **** *END*-----------------------------------------------------*/
  39:../Sources/AccelTask.c **** 
  40:../Sources/AccelTask.c **** 
  41:../Sources/AccelTask.c **** void Accel_task(uint32_t initial_data)
  42:../Sources/AccelTask.c **** {
  30              		.loc 1 42 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
  43:../Sources/AccelTask.c **** 	_queue_id health_qid;
  44:../Sources/AccelTask.c **** 	APPLICATION_MESSAGE *msg;
  45:../Sources/AccelTask.c **** 	
  46:../Sources/AccelTask.c **** 	
  47:../Sources/AccelTask.c **** 	 /* initialize I2C driver */
  48:../Sources/AccelTask.c **** 	   InitializeI2C();
  46              		.loc 1 48 0
  47 0008 FFF7FEFF 		bl	InitializeI2C
  49:../Sources/AccelTask.c **** 
  50:../Sources/AccelTask.c **** 	   /* configure the MMA7660 */
  51:../Sources/AccelTask.c **** 	   InitializeMMA7660();
  48              		.loc 1 51 0
  49 000c FFF7FEFF 		bl	InitializeMMA7660
  52:../Sources/AccelTask.c **** 	
  53:../Sources/AccelTask.c **** 	//printf("\n Accel: Hello World \n"); 
  54:../Sources/AccelTask.c **** 	
  55:../Sources/AccelTask.c **** 	//_task_block(); // Per Lab 5 requirements	
  56:../Sources/AccelTask.c **** 	health_qid = _msgq_get_id(0, HEALTH_QUEUE);		
  50              		.loc 1 56 0
  51 0010 4FF00000 		mov	r0, #0
  52 0014 4FF00101 		mov	r1, #1
  53 0018 FFF7FEFF 		bl	_msgq_get_id
  54 001c 0346     		mov	r3, r0
  55 001e FB81     		strh	r3, [r7, #14]	@ movhi
  56 0020 00E0     		b	.L3
  57              	.L4:
  57:../Sources/AccelTask.c **** 	while(1){		
  58:../Sources/AccelTask.c **** 		
  59:../Sources/AccelTask.c **** 		_time_delay(500);
  60:../Sources/AccelTask.c **** 		/* read first five registers on MMA7660 */
  61:../Sources/AccelTask.c **** 		read_I2C( I2C_ACCELEROMETER_ADDRESS, 0x00, 5 );
  62:../Sources/AccelTask.c **** 		      
  63:../Sources/AccelTask.c **** 		Sensor.mma7660_x = convert_accel_data( (uint8_t)recv_buffer[0] );
  64:../Sources/AccelTask.c **** 		Sensor.mma7660_y = convert_accel_data( (uint8_t)recv_buffer[1] );
  65:../Sources/AccelTask.c **** 		Sensor.mma7660_z = convert_accel_data( (uint8_t)recv_buffer[2] );
  66:../Sources/AccelTask.c **** 		Sensor.mma7660_status = recv_buffer[3];		      
  67:../Sources/AccelTask.c **** 		//print_accelerometer_data();   	
  68:../Sources/AccelTask.c **** 		
  69:../Sources/AccelTask.c **** 		msg = _msg_alloc_system(sizeof(*msg));
  70:../Sources/AccelTask.c **** 		if( msg != NULL){
  71:../Sources/AccelTask.c **** 			msg->HEADER.TARGET_QID = health_qid;
  72:../Sources/AccelTask.c **** 			msg->MESSAGE_TYPE = ACCEL_MESSAGE;
  73:../Sources/AccelTask.c **** 			msg->DATA = 0;			
  74:../Sources/AccelTask.c **** 			_msgq_send(msg);
  75:../Sources/AccelTask.c **** 		}		
  76:../Sources/AccelTask.c **** 	}   
  58              		.loc 1 76 0
  59 0022 00BF     		nop
  60              	.L3:
  59:../Sources/AccelTask.c **** 		_time_delay(500);
  61              		.loc 1 59 0
  62 0024 4FF4FA70 		mov	r0, #500
  63 0028 FFF7FEFF 		bl	_time_delay
  61:../Sources/AccelTask.c **** 		read_I2C( I2C_ACCELEROMETER_ADDRESS, 0x00, 5 );
  64              		.loc 1 61 0
  65 002c 4FF04C00 		mov	r0, #76
  66 0030 4FF00001 		mov	r1, #0
  67 0034 4FF00502 		mov	r2, #5
  68 0038 FFF7FEFF 		bl	read_I2C
  63:../Sources/AccelTask.c **** 		Sensor.mma7660_x = convert_accel_data( (uint8_t)recv_buffer[0] );
  69              		.loc 1 63 0
  70 003c 40F20003 		movw	r3, #:lower16:recv_buffer
  71 0040 C0F20003 		movt	r3, #:upper16:recv_buffer
  72 0044 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  73 0046 DBB2     		uxtb	r3, r3
  74 0048 5BB2     		sxtb	r3, r3
  75 004a 1846     		mov	r0, r3
  76 004c FFF7FEFF 		bl	convert_accel_data
  77 0050 0346     		mov	r3, r0
  78 0052 1A46     		mov	r2, r3
  79 0054 40F20003 		movw	r3, #:lower16:Sensor
  80 0058 C0F20003 		movt	r3, #:upper16:Sensor
  81 005c 1A70     		strb	r2, [r3, #0]
  64:../Sources/AccelTask.c **** 		Sensor.mma7660_y = convert_accel_data( (uint8_t)recv_buffer[1] );
  82              		.loc 1 64 0
  83 005e 40F20003 		movw	r3, #:lower16:recv_buffer
  84 0062 C0F20003 		movt	r3, #:upper16:recv_buffer
  85 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  86 0068 DBB2     		uxtb	r3, r3
  87 006a 5BB2     		sxtb	r3, r3
  88 006c 1846     		mov	r0, r3
  89 006e FFF7FEFF 		bl	convert_accel_data
  90 0072 0346     		mov	r3, r0
  91 0074 1A46     		mov	r2, r3
  92 0076 40F20003 		movw	r3, #:lower16:Sensor
  93 007a C0F20003 		movt	r3, #:upper16:Sensor
  94 007e 5A70     		strb	r2, [r3, #1]
  65:../Sources/AccelTask.c **** 		Sensor.mma7660_z = convert_accel_data( (uint8_t)recv_buffer[2] );
  95              		.loc 1 65 0
  96 0080 40F20003 		movw	r3, #:lower16:recv_buffer
  97 0084 C0F20003 		movt	r3, #:upper16:recv_buffer
  98 0088 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
  99 008a DBB2     		uxtb	r3, r3
 100 008c 5BB2     		sxtb	r3, r3
 101 008e 1846     		mov	r0, r3
 102 0090 FFF7FEFF 		bl	convert_accel_data
 103 0094 0346     		mov	r3, r0
 104 0096 1A46     		mov	r2, r3
 105 0098 40F20003 		movw	r3, #:lower16:Sensor
 106 009c C0F20003 		movt	r3, #:upper16:Sensor
 107 00a0 9A70     		strb	r2, [r3, #2]
  66:../Sources/AccelTask.c **** 		Sensor.mma7660_status = recv_buffer[3];		      
 108              		.loc 1 66 0
 109 00a2 40F20003 		movw	r3, #:lower16:recv_buffer
 110 00a6 C0F20003 		movt	r3, #:upper16:recv_buffer
 111 00aa DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 112 00ac 40F20003 		movw	r3, #:lower16:Sensor
 113 00b0 C0F20003 		movt	r3, #:upper16:Sensor
 114 00b4 DA70     		strb	r2, [r3, #3]
  69:../Sources/AccelTask.c **** 		msg = _msg_alloc_system(sizeof(*msg));
 115              		.loc 1 69 0
 116 00b6 4FF01000 		mov	r0, #16
 117 00ba FFF7FEFF 		bl	_msg_alloc_system
 118 00be B860     		str	r0, [r7, #8]
  70:../Sources/AccelTask.c **** 		if( msg != NULL){
 119              		.loc 1 70 0
 120 00c0 BB68     		ldr	r3, [r7, #8]
 121 00c2 002B     		cmp	r3, #0
 122 00c4 ADD0     		beq	.L4
  71:../Sources/AccelTask.c **** 			msg->HEADER.TARGET_QID = health_qid;
 123              		.loc 1 71 0
 124 00c6 BB68     		ldr	r3, [r7, #8]
 125 00c8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 126 00ca 5A80     		strh	r2, [r3, #2]	@ movhi
  72:../Sources/AccelTask.c **** 			msg->MESSAGE_TYPE = ACCEL_MESSAGE;
 127              		.loc 1 72 0
 128 00cc BB68     		ldr	r3, [r7, #8]
 129 00ce 4FF00202 		mov	r2, #2
 130 00d2 1A72     		strb	r2, [r3, #8]
  73:../Sources/AccelTask.c **** 			msg->DATA = 0;			
 131              		.loc 1 73 0
 132 00d4 BB68     		ldr	r3, [r7, #8]
 133 00d6 4FF00002 		mov	r2, #0
 134 00da DA60     		str	r2, [r3, #12]
  74:../Sources/AccelTask.c **** 			_msgq_send(msg);
 135              		.loc 1 74 0
 136 00dc B868     		ldr	r0, [r7, #8]
 137 00de FFF7FEFF 		bl	_msgq_send
 138              		.loc 1 76 0
 139 00e2 9EE7     		b	.L4
 140              		.cfi_endproc
 141              	.LFE0:
 143              		.section	.rodata
 144              		.align	2
 145              	.LC0:
 146 0000 69326330 		.ascii	"i2c0:\000"
 146      3A00
 147 0006 0000     		.align	2
 148              	.LC1:
 149 0008 4661696C 		.ascii	"Failed to open the I2C driver!\012\000"
 149      65642074 
 149      6F206F70 
 149      656E2074 
 149      68652049 
 150              		.section	.text.InitializeI2C,"ax",%progbits
 151              		.align	2
 152              		.global	InitializeI2C
 153              		.thumb
 154              		.thumb_func
 156              	InitializeI2C:
 157              	.LFB1:
  77:../Sources/AccelTask.c **** }
  78:../Sources/AccelTask.c **** void InitializeI2C()
  79:../Sources/AccelTask.c **** {
 158              		.loc 1 79 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 00AF     		add	r7, sp, #0
 168              	.LCFI4:
 169              		.cfi_def_cfa_register 7
  80:../Sources/AccelTask.c ****    /* Open the I2C driver, and assign a I2C device handler*/
  81:../Sources/AccelTask.c ****    fd = fopen ("i2c0:", NULL);
 170              		.loc 1 81 0
 171 0004 40F20000 		movw	r0, #:lower16:.LC0
 172 0008 C0F20000 		movt	r0, #:upper16:.LC0
 173 000c 4FF00001 		mov	r1, #0
 174 0010 FFF7FEFF 		bl	_io_fopen
 175 0014 0246     		mov	r2, r0
 176 0016 40F20003 		movw	r3, #:lower16:fd
 177 001a C0F20003 		movt	r3, #:upper16:fd
 178 001e 1A60     		str	r2, [r3, #0]
  82:../Sources/AccelTask.c ****    if (fd == NULL)
 179              		.loc 1 82 0
 180 0020 40F20003 		movw	r3, #:lower16:fd
 181 0024 C0F20003 		movt	r3, #:upper16:fd
 182 0028 1B68     		ldr	r3, [r3, #0]
 183 002a 002B     		cmp	r3, #0
 184 002c 0DD1     		bne	.L6
  83:../Sources/AccelTask.c ****    {
  84:../Sources/AccelTask.c ****       printf ("Failed to open the I2C driver!\n");
 185              		.loc 1 84 0
 186 002e 40F20000 		movw	r0, #:lower16:.LC1
 187 0032 C0F20000 		movt	r0, #:upper16:.LC1
 188 0036 FFF7FEFF 		bl	_io_printf
  85:../Sources/AccelTask.c ****       _time_delay (200L);
 189              		.loc 1 85 0
 190 003a 4FF0C800 		mov	r0, #200
 191 003e FFF7FEFF 		bl	_time_delay
  86:../Sources/AccelTask.c ****       _mqx_exit (1L);
 192              		.loc 1 86 0
 193 0042 4FF00100 		mov	r0, #1
 194 0046 FFF7FEFF 		bl	_mqx_exit
 195              	.L6:
  87:../Sources/AccelTask.c ****    }
  88:../Sources/AccelTask.c **** 
  89:../Sources/AccelTask.c ****    /* Set I2C into Master mode */
  90:../Sources/AccelTask.c ****    ioctl (fd, IO_IOCTL_I2C_SET_MASTER_MODE, NULL);
 196              		.loc 1 90 0
 197 004a 40F20003 		movw	r3, #:lower16:fd
 198 004e C0F20003 		movt	r3, #:upper16:fd
 199 0052 1B68     		ldr	r3, [r3, #0]
 200 0054 1846     		mov	r0, r3
 201 0056 40F20341 		movw	r1, #1027
 202 005a 4FF00002 		mov	r2, #0
 203 005e FFF7FEFF 		bl	_io_ioctl
  91:../Sources/AccelTask.c **** }
 204              		.loc 1 91 0
 205 0062 80BD     		pop	{r7, pc}
 206              		.cfi_endproc
 207              	.LFE1:
 209              		.section	.text.InitializeMMA7660,"ax",%progbits
 210              		.align	2
 211              		.global	InitializeMMA7660
 212              		.thumb
 213              		.thumb_func
 215              	InitializeMMA7660:
 216              	.LFB2:
  92:../Sources/AccelTask.c **** 
  93:../Sources/AccelTask.c **** void InitializeMMA7660()
  94:../Sources/AccelTask.c **** {
 217              		.loc 1 94 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221 0000 80B5     		push	{r7, lr}
 222              	.LCFI5:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 7, -8
 225              		.cfi_offset 14, -4
 226 0002 00AF     		add	r7, sp, #0
 227              	.LCFI6:
 228              		.cfi_def_cfa_register 7
  95:../Sources/AccelTask.c ****    /* Configure the MMA7660 */
  96:../Sources/AccelTask.c ****    write_I2C( I2C_ACCELEROMETER_ADDRESS, 0x09, 0xE0 );
 229              		.loc 1 96 0
 230 0004 4FF04C00 		mov	r0, #76
 231 0008 4FF00901 		mov	r1, #9
 232 000c 4FF0E002 		mov	r2, #224
 233 0010 FFF7FEFF 		bl	write_I2C
  97:../Sources/AccelTask.c ****    write_I2C( I2C_ACCELEROMETER_ADDRESS, 0x07, 0x19 );
 234              		.loc 1 97 0
 235 0014 4FF04C00 		mov	r0, #76
 236 0018 4FF00701 		mov	r1, #7
 237 001c 4FF01902 		mov	r2, #25
 238 0020 FFF7FEFF 		bl	write_I2C
  98:../Sources/AccelTask.c **** }
 239              		.loc 1 98 0
 240 0024 80BD     		pop	{r7, pc}
 241              		.cfi_endproc
 242              	.LFE2:
 244 0026 00BF     		.section	.text.write_I2C,"ax",%progbits
 245              		.align	2
 246              		.global	write_I2C
 247              		.thumb
 248              		.thumb_func
 250              	write_I2C:
 251              	.LFB3:
  99:../Sources/AccelTask.c **** 
 100:../Sources/AccelTask.c **** /* Function for writing data to I2C Sensor */
 101:../Sources/AccelTask.c **** void write_I2C(int i2c_device_address, unsigned char reg, unsigned char value)
 102:../Sources/AccelTask.c **** {
 252              		.loc 1 102 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 16
 255              		@ frame_needed = 1, uses_anonymous_args = 0
 256 0000 80B5     		push	{r7, lr}
 257              	.LCFI7:
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0002 84B0     		sub	sp, sp, #16
 262              	.LCFI8:
 263              		.cfi_def_cfa_offset 24
 264 0004 00AF     		add	r7, sp, #0
 265              	.LCFI9:
 266              		.cfi_def_cfa_register 7
 267 0006 7860     		str	r0, [r7, #4]
 268 0008 1346     		mov	r3, r2
 269 000a 0A46     		mov	r2, r1
 270 000c FA70     		strb	r2, [r7, #3]
 271 000e BB70     		strb	r3, [r7, #2]
 103:../Sources/AccelTask.c ****    unsigned char data[2];
 104:../Sources/AccelTask.c **** 
 105:../Sources/AccelTask.c ****    data[0]=reg;   //Sensor register
 272              		.loc 1 105 0
 273 0010 FB78     		ldrb	r3, [r7, #3]
 274 0012 3B73     		strb	r3, [r7, #12]
 106:../Sources/AccelTask.c ****    data[1]=value; //Byte of data to write to register
 275              		.loc 1 106 0
 276 0014 BB78     		ldrb	r3, [r7, #2]
 277 0016 7B73     		strb	r3, [r7, #13]
 107:../Sources/AccelTask.c **** 
 108:../Sources/AccelTask.c ****    /* Set the destination address */
 109:../Sources/AccelTask.c ****    ioctl (fd, IO_IOCTL_I2C_SET_DESTINATION_ADDRESS, &i2c_device_address);
 278              		.loc 1 109 0
 279 0018 40F20003 		movw	r3, #:lower16:fd
 280 001c C0F20003 		movt	r3, #:upper16:fd
 281 0020 1A68     		ldr	r2, [r3, #0]
 282 0022 07F10403 		add	r3, r7, #4
 283 0026 1046     		mov	r0, r2
 284 0028 4FF48161 		mov	r1, #1032
 285 002c 1A46     		mov	r2, r3
 286 002e FFF7FEFF 		bl	_io_ioctl
 110:../Sources/AccelTask.c **** 
 111:../Sources/AccelTask.c ****    /* Write 2 bytes of data: the desired register and then the data */
 112:../Sources/AccelTask.c ****    fwrite (&data, 1, 2, fd);  //data to write, size of unit, # of bytes to write, I2C device handle
 287              		.loc 1 112 0
 288 0032 40F20003 		movw	r3, #:lower16:fd
 289 0036 C0F20003 		movt	r3, #:upper16:fd
 290 003a 1A68     		ldr	r2, [r3, #0]
 291 003c 07F10C03 		add	r3, r7, #12
 292 0040 1046     		mov	r0, r2
 293 0042 1946     		mov	r1, r3
 294 0044 4FF00202 		mov	r2, #2
 295 0048 FFF7FEFF 		bl	_io_write
 113:../Sources/AccelTask.c ****    fflush (fd);
 296              		.loc 1 113 0
 297 004c 40F20003 		movw	r3, #:lower16:fd
 298 0050 C0F20003 		movt	r3, #:upper16:fd
 299 0054 1B68     		ldr	r3, [r3, #0]
 300 0056 1846     		mov	r0, r3
 301 0058 FFF7FEFF 		bl	_io_fflush
 114:../Sources/AccelTask.c **** 
 115:../Sources/AccelTask.c ****    /* Send out stop */
 116:../Sources/AccelTask.c ****    ioctl (fd, IO_IOCTL_I2C_STOP, NULL);
 302              		.loc 1 116 0
 303 005c 40F20003 		movw	r3, #:lower16:fd
 304 0060 C0F20003 		movt	r3, #:upper16:fd
 305 0064 1B68     		ldr	r3, [r3, #0]
 306 0066 1846     		mov	r0, r3
 307 0068 40F20C41 		movw	r1, #1036
 308 006c 4FF00002 		mov	r2, #0
 309 0070 FFF7FEFF 		bl	_io_ioctl
 117:../Sources/AccelTask.c **** }
 310              		.loc 1 117 0
 311 0074 07F11007 		add	r7, r7, #16
 312 0078 BD46     		mov	sp, r7
 313 007a 80BD     		pop	{r7, pc}
 314              		.cfi_endproc
 315              	.LFE3:
 317              		.section	.text.read_I2C,"ax",%progbits
 318              		.align	2
 319              		.global	read_I2C
 320              		.thumb
 321              		.thumb_func
 323              	read_I2C:
 324              	.LFB4:
 118:../Sources/AccelTask.c **** 
 119:../Sources/AccelTask.c **** /* Function for reading data from I2C. Data placed in recv_buffer */
 120:../Sources/AccelTask.c **** void read_I2C(int i2c_device_address, int sensor, int length)
 121:../Sources/AccelTask.c **** {
 325              		.loc 1 121 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 24
 328              		@ frame_needed = 1, uses_anonymous_args = 0
 329 0000 80B5     		push	{r7, lr}
 330              	.LCFI10:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 7, -8
 333              		.cfi_offset 14, -4
 334 0002 86B0     		sub	sp, sp, #24
 335              	.LCFI11:
 336              		.cfi_def_cfa_offset 32
 337 0004 00AF     		add	r7, sp, #0
 338              	.LCFI12:
 339              		.cfi_def_cfa_register 7
 340 0006 F860     		str	r0, [r7, #12]
 341 0008 B960     		str	r1, [r7, #8]
 342 000a 7A60     		str	r2, [r7, #4]
 122:../Sources/AccelTask.c ****    int n = length;
 343              		.loc 1 122 0
 344 000c 7B68     		ldr	r3, [r7, #4]
 345 000e 7B61     		str	r3, [r7, #20]
 123:../Sources/AccelTask.c **** 
 124:../Sources/AccelTask.c ****    /* the starting register for the particular sensor requested */
 125:../Sources/AccelTask.c ****    unsigned char reg=sensor;
 346              		.loc 1 125 0
 347 0010 BB68     		ldr	r3, [r7, #8]
 348 0012 DBB2     		uxtb	r3, r3
 349 0014 FB74     		strb	r3, [r7, #19]
 126:../Sources/AccelTask.c **** 
 127:../Sources/AccelTask.c ****    /* set the I2C destination address */
 128:../Sources/AccelTask.c ****    ioctl( fd, IO_IOCTL_I2C_SET_DESTINATION_ADDRESS, &i2c_device_address );
 350              		.loc 1 128 0
 351 0016 40F20003 		movw	r3, #:lower16:fd
 352 001a C0F20003 		movt	r3, #:upper16:fd
 353 001e 1A68     		ldr	r2, [r3, #0]
 354 0020 07F10C03 		add	r3, r7, #12
 355 0024 1046     		mov	r0, r2
 356 0026 4FF48161 		mov	r1, #1032
 357 002a 1A46     		mov	r2, r3
 358 002c FFF7FEFF 		bl	_io_ioctl
 129:../Sources/AccelTask.c **** 
 130:../Sources/AccelTask.c ****    /* tell the QE96 which sensor data to get */
 131:../Sources/AccelTask.c ****    fwrite( &reg, 1, 1, fd); //data to write, size of unit, # of bytes to write, I2C device handl er
 359              		.loc 1 131 0
 360 0030 40F20003 		movw	r3, #:lower16:fd
 361 0034 C0F20003 		movt	r3, #:upper16:fd
 362 0038 1A68     		ldr	r2, [r3, #0]
 363 003a 07F11303 		add	r3, r7, #19
 364 003e 1046     		mov	r0, r2
 365 0040 1946     		mov	r1, r3
 366 0042 4FF00102 		mov	r2, #1
 367 0046 FFF7FEFF 		bl	_io_write
 132:../Sources/AccelTask.c **** 
 133:../Sources/AccelTask.c ****    /* wait for completion */
 134:../Sources/AccelTask.c ****    fflush( fd );
 368              		.loc 1 134 0
 369 004a 40F20003 		movw	r3, #:lower16:fd
 370 004e C0F20003 		movt	r3, #:upper16:fd
 371 0052 1B68     		ldr	r3, [r3, #0]
 372 0054 1846     		mov	r0, r3
 373 0056 FFF7FEFF 		bl	_io_fflush
 135:../Sources/AccelTask.c **** 
 136:../Sources/AccelTask.c ****    /* do a repeated start to avoid giving up control */
 137:../Sources/AccelTask.c ****    ioctl( fd, IO_IOCTL_I2C_REPEATED_START, NULL );
 374              		.loc 1 137 0
 375 005a 40F20003 		movw	r3, #:lower16:fd
 376 005e C0F20003 		movt	r3, #:upper16:fd
 377 0062 1B68     		ldr	r3, [r3, #0]
 378 0064 1846     		mov	r0, r3
 379 0066 40F20B41 		movw	r1, #1035
 380 006a 4FF00002 		mov	r2, #0
 381 006e FFF7FEFF 		bl	_io_ioctl
 138:../Sources/AccelTask.c **** 
 139:../Sources/AccelTask.c ****    /* set how many bytes to read */
 140:../Sources/AccelTask.c ****    ioctl( fd, IO_IOCTL_I2C_SET_RX_REQUEST, &n );
 382              		.loc 1 140 0
 383 0072 40F20003 		movw	r3, #:lower16:fd
 384 0076 C0F20003 		movt	r3, #:upper16:fd
 385 007a 1A68     		ldr	r2, [r3, #0]
 386 007c 07F11403 		add	r3, r7, #20
 387 0080 1046     		mov	r0, r2
 388 0082 40F20A41 		movw	r1, #1034
 389 0086 1A46     		mov	r2, r3
 390 0088 FFF7FEFF 		bl	_io_ioctl
 141:../Sources/AccelTask.c **** 
 142:../Sources/AccelTask.c ****    /*
 143:../Sources/AccelTask.c ****     * read n bytes of data and put it into the recv_buffer
 144:../Sources/AccelTask.c ****     * buffer to read data into, size of unit, # of bytes to read, I2C device handler
 145:../Sources/AccelTask.c ****     */
 146:../Sources/AccelTask.c ****    fread( &recv_buffer, 1, n, fd );
 391              		.loc 1 146 0
 392 008c 40F20003 		movw	r3, #:lower16:fd
 393 0090 C0F20003 		movt	r3, #:upper16:fd
 394 0094 1A68     		ldr	r2, [r3, #0]
 395 0096 7B69     		ldr	r3, [r7, #20]
 396 0098 1046     		mov	r0, r2
 397 009a 40F20001 		movw	r1, #:lower16:recv_buffer
 398 009e C0F20001 		movt	r1, #:upper16:recv_buffer
 399 00a2 1A46     		mov	r2, r3
 400 00a4 FFF7FEFF 		bl	_io_read
 147:../Sources/AccelTask.c **** 
 148:../Sources/AccelTask.c ****    /* wait for completion */
 149:../Sources/AccelTask.c ****    fflush( fd );
 401              		.loc 1 149 0
 402 00a8 40F20003 		movw	r3, #:lower16:fd
 403 00ac C0F20003 		movt	r3, #:upper16:fd
 404 00b0 1B68     		ldr	r3, [r3, #0]
 405 00b2 1846     		mov	r0, r3
 406 00b4 FFF7FEFF 		bl	_io_fflush
 150:../Sources/AccelTask.c **** 
 151:../Sources/AccelTask.c ****    /* send out stop */
 152:../Sources/AccelTask.c ****    ioctl( fd, IO_IOCTL_I2C_STOP, NULL );
 407              		.loc 1 152 0
 408 00b8 40F20003 		movw	r3, #:lower16:fd
 409 00bc C0F20003 		movt	r3, #:upper16:fd
 410 00c0 1B68     		ldr	r3, [r3, #0]
 411 00c2 1846     		mov	r0, r3
 412 00c4 40F20C41 		movw	r1, #1036
 413 00c8 4FF00002 		mov	r2, #0
 414 00cc FFF7FEFF 		bl	_io_ioctl
 153:../Sources/AccelTask.c **** }
 415              		.loc 1 153 0
 416 00d0 07F11807 		add	r7, r7, #24
 417 00d4 BD46     		mov	sp, r7
 418 00d6 80BD     		pop	{r7, pc}
 419              		.cfi_endproc
 420              	.LFE4:
 422              		.section	.text.convert_accel_data,"ax",%progbits
 423              		.align	2
 424              		.global	convert_accel_data
 425              		.thumb
 426              		.thumb_func
 428              	convert_accel_data:
 429              	.LFB5:
 154:../Sources/AccelTask.c **** // ===  FUNCTION  ======================================================================
 155:../Sources/AccelTask.c **** //         Name:  convert_accel_data
 156:../Sources/AccelTask.c **** /**
 157:../Sources/AccelTask.c ****  * @brief Convert 6-bit result into an 8-bit signed char
 158:../Sources/AccelTask.c ****  *
 159:../Sources/AccelTask.c ****  * @param signed char
 160:../Sources/AccelTask.c ****  * 
 161:../Sources/AccelTask.c ****  * @return signed char
 162:../Sources/AccelTask.c ****  */
 163:../Sources/AccelTask.c **** // =====================================================================================
 164:../Sources/AccelTask.c **** signed char convert_accel_data ( signed char byte )
 165:../Sources/AccelTask.c **** {
 430              		.loc 1 165 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 8
 433              		@ frame_needed = 1, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 435 0000 80B4     		push	{r7}
 436              	.LCFI13:
 437              		.cfi_def_cfa_offset 4
 438              		.cfi_offset 7, -4
 439 0002 83B0     		sub	sp, sp, #12
 440              	.LCFI14:
 441              		.cfi_def_cfa_offset 16
 442 0004 00AF     		add	r7, sp, #0
 443              	.LCFI15:
 444              		.cfi_def_cfa_register 7
 445 0006 0346     		mov	r3, r0
 446 0008 FB71     		strb	r3, [r7, #7]
 166:../Sources/AccelTask.c ****    byte &= ~0x40;       // Turn off alert bit
 447              		.loc 1 166 0
 448 000a FB79     		ldrb	r3, [r7, #7]
 449 000c 23F04003 		bic	r3, r3, #64
 450 0010 FB71     		strb	r3, [r7, #7]
 167:../Sources/AccelTask.c ****    if( byte & 0x20 ) {  // update 6-bit signed format to 8-bit signed format
 451              		.loc 1 167 0
 452 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 453 0014 03F02003 		and	r3, r3, #32
 454 0018 002B     		cmp	r3, #0
 455 001a 03D0     		beq	.L11
 168:../Sources/AccelTask.c ****       byte |= 0xE0;
 456              		.loc 1 168 0
 457 001c FB79     		ldrb	r3, [r7, #7]
 458 001e 63F01F03 		orn	r3, r3, #31
 459 0022 FB71     		strb	r3, [r7, #7]
 460              	.L11:
 169:../Sources/AccelTask.c ****    }
 170:../Sources/AccelTask.c ****    return( byte );
 461              		.loc 1 170 0
 462 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 463 0026 5BB2     		sxtb	r3, r3
 171:../Sources/AccelTask.c **** }      /* -----  end of function convert_accel_data  ----- */
 464              		.loc 1 171 0
 465 0028 1846     		mov	r0, r3
 466 002a 07F10C07 		add	r7, r7, #12
 467 002e BD46     		mov	sp, r7
 468 0030 80BC     		pop	{r7}
 469 0032 7047     		bx	lr
 470              		.cfi_endproc
 471              	.LFE5:
 473              		.text
 474              	.Letext0:
 475              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 476              		.file 3 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/psptypes.h"
 477              		.file 4 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/queue.h"
 478              		.file 5 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/fio.h"
 479              		.file 6 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/io.h"
 480              		.file 7 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/message.h"
 481              		.file 8 "../Sources/main.h"
DEFINED SYMBOLS
                            *ABS*:00000000 AccelTask.c
                            *COM*:00000004 fd
                            *COM*:00000005 recv_buffer
                            *COM*:00000007 Sensor
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:22     .text.Accel_task:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:27     .text.Accel_task:00000000 Accel_task
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:156    .text.InitializeI2C:00000000 InitializeI2C
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:215    .text.InitializeMMA7660:00000000 InitializeMMA7660
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:323    .text.read_I2C:00000000 read_I2C
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:428    .text.convert_accel_data:00000000 convert_accel_data
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:144    .rodata:00000000 $d
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:145    .rodata:00000000 .LC0
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:148    .rodata:00000008 .LC1
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:151    .text.InitializeI2C:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:210    .text.InitializeMMA7660:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:250    .text.write_I2C:00000000 write_I2C
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:245    .text.write_I2C:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:318    .text.read_I2C:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccCEv1lg.s:423    .text.convert_accel_data:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_msgq_get_id
_time_delay
_msg_alloc_system
_msgq_send
_io_fopen
_io_printf
_mqx_exit
_io_ioctl
_io_write
_io_fflush
_io_read
