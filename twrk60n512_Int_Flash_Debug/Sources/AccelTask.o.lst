   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"AccelTask.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	fd,4,4
  19              		.comm	recv_buffer,5,4
  20              		.comm	Sensor,7,4
  21              		.section	.rodata
  22              		.align	2
  23              	.LC0:
  24 0000 41636365 		.ascii	"Accel: X = %03d, \000"
  24      6C3A2058 
  24      203D2025 
  24      3033642C 
  24      2000
  25 0012 0000     		.align	2
  26              	.LC1:
  27 0014 59203D20 		.ascii	"Y = %03d, \000"
  27      25303364 
  27      2C2000
  28 001f 00       		.align	2
  29              	.LC2:
  30 0020 5A203D20 		.ascii	"Z = %03d\015\012\000"
  30      25303364 
  30      0D0A00
  31              		.section	.text.print_accelerometer_data,"ax",%progbits
  32              		.align	2
  33              		.global	print_accelerometer_data
  34              		.thumb
  35              		.thumb_func
  37              	print_accelerometer_data:
  38              	.LFB0:
  39              		.file 1 "../Sources/AccelTask.c"
   1:../Sources/AccelTask.c **** /*
   2:../Sources/AccelTask.c ****  * AccelTask.c
   3:../Sources/AccelTask.c ****  *
   4:../Sources/AccelTask.c ****  *  Created on: Feb 6, 2014
   5:../Sources/AccelTask.c ****  *      Author: Embedded Access Inc
   6:../Sources/AccelTask.c ****  */
   7:../Sources/AccelTask.c **** 
   8:../Sources/AccelTask.c **** #include "main.h"
   9:../Sources/AccelTask.c **** #include <i2c.h>
  10:../Sources/AccelTask.c **** 
  11:../Sources/AccelTask.c **** #define I2C_ACCELEROMETER_ADDRESS   0x4C      //MMA7660
  12:../Sources/AccelTask.c **** #define I2C_DATA_SIZE               5
  13:../Sources/AccelTask.c **** 
  14:../Sources/AccelTask.c **** 
  15:../Sources/AccelTask.c **** FILE_PTR fd;
  16:../Sources/AccelTask.c **** unsigned char recv_buffer[I2C_DATA_SIZE];
  17:../Sources/AccelTask.c **** 
  18:../Sources/AccelTask.c **** void write_I2C(int i2c_device, unsigned char reg, unsigned char value);
  19:../Sources/AccelTask.c **** void read_I2C(int i2c_device, int sensor, int length);
  20:../Sources/AccelTask.c **** void print_accelerometer_data();
  21:../Sources/AccelTask.c **** signed char convert_accel_data(signed char input);
  22:../Sources/AccelTask.c **** void InitializeI2C();
  23:../Sources/AccelTask.c **** void InitializeMMA7660();
  24:../Sources/AccelTask.c **** 
  25:../Sources/AccelTask.c **** SENSOR_DATA Sensor;
  26:../Sources/AccelTask.c **** 
  27:../Sources/AccelTask.c **** /*TASK*-----------------------------------------------------
  28:../Sources/AccelTask.c **** * 
  29:../Sources/AccelTask.c **** * Task Name    : Accel_task
  30:../Sources/AccelTask.c **** * Comments     :
  31:../Sources/AccelTask.c **** *    This is the Accelerometer task
  32:../Sources/AccelTask.c **** *    From TWR-K60N512-UM User Manual v1.1
  33:../Sources/AccelTask.c **** *    Accelerometer:
  34:../Sources/AccelTask.c **** *    I2C SDA -> PTD9 = I2C0_SDA
  35:../Sources/AccelTask.c **** *    I2C SCL -> PTD8 = I2C0_SCL
  36:../Sources/AccelTask.c **** *    IRQ     -> PTD10 = PTD10    
  37:../Sources/AccelTask.c **** *
  38:../Sources/AccelTask.c **** *END*-----------------------------------------------------*/
  39:../Sources/AccelTask.c **** void print_accelerometer_data()
  40:../Sources/AccelTask.c **** {
  40              		.loc 1 40 0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 0
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44 0000 80B5     		push	{r7, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49 0002 00AF     		add	r7, sp, #0
  50              	.LCFI1:
  51              		.cfi_def_cfa_register 7
  41:../Sources/AccelTask.c ****    //MMA7660 Sensor
  42:../Sources/AccelTask.c **** 
  43:../Sources/AccelTask.c ****    printf("Accel: X = %03d, ", Sensor.mma7660_x );
  52              		.loc 1 43 0
  53 0004 40F20003 		movw	r3, #:lower16:Sensor
  54 0008 C0F20003 		movt	r3, #:upper16:Sensor
  55 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  56 000e 5BB2     		sxtb	r3, r3
  57 0010 40F20000 		movw	r0, #:lower16:.LC0
  58 0014 C0F20000 		movt	r0, #:upper16:.LC0
  59 0018 1946     		mov	r1, r3
  60 001a FFF7FEFF 		bl	_io_printf
  44:../Sources/AccelTask.c ****    printf("Y = %03d, ", Sensor.mma7660_y );
  61              		.loc 1 44 0
  62 001e 40F20003 		movw	r3, #:lower16:Sensor
  63 0022 C0F20003 		movt	r3, #:upper16:Sensor
  64 0026 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  65 0028 5BB2     		sxtb	r3, r3
  66 002a 40F20000 		movw	r0, #:lower16:.LC1
  67 002e C0F20000 		movt	r0, #:upper16:.LC1
  68 0032 1946     		mov	r1, r3
  69 0034 FFF7FEFF 		bl	_io_printf
  45:../Sources/AccelTask.c ****    printf("Z = %03d\r\n", Sensor.mma7660_z );
  70              		.loc 1 45 0
  71 0038 40F20003 		movw	r3, #:lower16:Sensor
  72 003c C0F20003 		movt	r3, #:upper16:Sensor
  73 0040 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
  74 0042 5BB2     		sxtb	r3, r3
  75 0044 40F20000 		movw	r0, #:lower16:.LC2
  76 0048 C0F20000 		movt	r0, #:upper16:.LC2
  77 004c 1946     		mov	r1, r3
  78 004e FFF7FEFF 		bl	_io_printf
  46:../Sources/AccelTask.c **** }
  79              		.loc 1 46 0
  80 0052 80BD     		pop	{r7, pc}
  81              		.cfi_endproc
  82              	.LFE0:
  84              		.section	.rodata
  85 002b 00       		.align	2
  86              	.LC3:
  87 002c 0A204163 		.ascii	"\012 Accel: Hello World \012\000"
  87      63656C3A 
  87      2048656C 
  87      6C6F2057 
  87      6F726C64 
  88              		.section	.text.Accel_task,"ax",%progbits
  89              		.align	2
  90              		.global	Accel_task
  91              		.thumb
  92              		.thumb_func
  94              	Accel_task:
  95              	.LFB1:
  47:../Sources/AccelTask.c **** 
  48:../Sources/AccelTask.c **** void Accel_task(uint32_t initial_data)
  49:../Sources/AccelTask.c **** {
  96              		.loc 1 49 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 16
  99              		@ frame_needed = 1, uses_anonymous_args = 0
 100 0000 80B5     		push	{r7, lr}
 101              	.LCFI2:
 102              		.cfi_def_cfa_offset 8
 103              		.cfi_offset 7, -8
 104              		.cfi_offset 14, -4
 105 0002 84B0     		sub	sp, sp, #16
 106              	.LCFI3:
 107              		.cfi_def_cfa_offset 24
 108 0004 00AF     		add	r7, sp, #0
 109              	.LCFI4:
 110              		.cfi_def_cfa_register 7
 111 0006 7860     		str	r0, [r7, #4]
  50:../Sources/AccelTask.c **** 	_queue_id health_qid;
  51:../Sources/AccelTask.c **** 	APPLICATION_MESSAGE *msg;
  52:../Sources/AccelTask.c **** 	
  53:../Sources/AccelTask.c **** 	
  54:../Sources/AccelTask.c **** 	 /* initialize I2C driver */
  55:../Sources/AccelTask.c **** 	   InitializeI2C();
 112              		.loc 1 55 0
 113 0008 FFF7FEFF 		bl	InitializeI2C
  56:../Sources/AccelTask.c **** 
  57:../Sources/AccelTask.c **** 	   /* configure the MMA7660 */
  58:../Sources/AccelTask.c **** 	   InitializeMMA7660();
 114              		.loc 1 58 0
 115 000c FFF7FEFF 		bl	InitializeMMA7660
  59:../Sources/AccelTask.c **** 	
  60:../Sources/AccelTask.c **** 	printf("\n Accel: Hello World \n"); 
 116              		.loc 1 60 0
 117 0010 40F20000 		movw	r0, #:lower16:.LC3
 118 0014 C0F20000 		movt	r0, #:upper16:.LC3
 119 0018 FFF7FEFF 		bl	_io_printf
  61:../Sources/AccelTask.c **** 	
  62:../Sources/AccelTask.c **** 	//_task_block(); // Per Lab 5 requirements	
  63:../Sources/AccelTask.c **** 	health_qid = _msgq_get_id(0, HEALTH_QUEUE);		
 120              		.loc 1 63 0
 121 001c 4FF00000 		mov	r0, #0
 122 0020 4FF00101 		mov	r1, #1
 123 0024 FFF7FEFF 		bl	_msgq_get_id
 124 0028 0346     		mov	r3, r0
 125 002a FB81     		strh	r3, [r7, #14]	@ movhi
 126 002c 00E0     		b	.L4
 127              	.L5:
  64:../Sources/AccelTask.c **** 	while(1){		
  65:../Sources/AccelTask.c **** 		/* read first five registers on MMA7660 */
  66:../Sources/AccelTask.c **** 		      read_I2C( I2C_ACCELEROMETER_ADDRESS, 0x00, 5 );
  67:../Sources/AccelTask.c **** 		      
  68:../Sources/AccelTask.c **** 		      Sensor.mma7660_x = convert_accel_data( (uint8_t)recv_buffer[0] );
  69:../Sources/AccelTask.c **** 		      Sensor.mma7660_y = convert_accel_data( (uint8_t)recv_buffer[1] );
  70:../Sources/AccelTask.c **** 		      Sensor.mma7660_z = convert_accel_data( (uint8_t)recv_buffer[2] );
  71:../Sources/AccelTask.c **** 		      Sensor.mma7660_status = recv_buffer[3];
  72:../Sources/AccelTask.c **** 		      
  73:../Sources/AccelTask.c **** 		      print_accelerometer_data();   
  74:../Sources/AccelTask.c **** 		_time_delay(500);
  75:../Sources/AccelTask.c **** 		
  76:../Sources/AccelTask.c **** 		msg = _msg_alloc_system(sizeof(*msg));
  77:../Sources/AccelTask.c **** 		if( msg != NULL){
  78:../Sources/AccelTask.c **** 			msg->HEADER.TARGET_QID = health_qid;
  79:../Sources/AccelTask.c **** 			msg->MESSAGE_TYPE = ACCEL_MESSAGE;
  80:../Sources/AccelTask.c **** 			msg->DATA = 0;			
  81:../Sources/AccelTask.c **** 			_msgq_send(msg);
  82:../Sources/AccelTask.c **** 		}		
  83:../Sources/AccelTask.c **** 		//_sched_yield();
  84:../Sources/AccelTask.c **** 	}   
 128              		.loc 1 84 0
 129 002e 00BF     		nop
 130              	.L4:
  66:../Sources/AccelTask.c **** 		      read_I2C( I2C_ACCELEROMETER_ADDRESS, 0x00, 5 );
 131              		.loc 1 66 0
 132 0030 4FF04C00 		mov	r0, #76
 133 0034 4FF00001 		mov	r1, #0
 134 0038 4FF00502 		mov	r2, #5
 135 003c FFF7FEFF 		bl	read_I2C
  68:../Sources/AccelTask.c **** 		      Sensor.mma7660_x = convert_accel_data( (uint8_t)recv_buffer[0] );
 136              		.loc 1 68 0
 137 0040 40F20003 		movw	r3, #:lower16:recv_buffer
 138 0044 C0F20003 		movt	r3, #:upper16:recv_buffer
 139 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 140 004a DBB2     		uxtb	r3, r3
 141 004c 5BB2     		sxtb	r3, r3
 142 004e 1846     		mov	r0, r3
 143 0050 FFF7FEFF 		bl	convert_accel_data
 144 0054 0346     		mov	r3, r0
 145 0056 1A46     		mov	r2, r3
 146 0058 40F20003 		movw	r3, #:lower16:Sensor
 147 005c C0F20003 		movt	r3, #:upper16:Sensor
 148 0060 1A70     		strb	r2, [r3, #0]
  69:../Sources/AccelTask.c **** 		      Sensor.mma7660_y = convert_accel_data( (uint8_t)recv_buffer[1] );
 149              		.loc 1 69 0
 150 0062 40F20003 		movw	r3, #:lower16:recv_buffer
 151 0066 C0F20003 		movt	r3, #:upper16:recv_buffer
 152 006a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 153 006c DBB2     		uxtb	r3, r3
 154 006e 5BB2     		sxtb	r3, r3
 155 0070 1846     		mov	r0, r3
 156 0072 FFF7FEFF 		bl	convert_accel_data
 157 0076 0346     		mov	r3, r0
 158 0078 1A46     		mov	r2, r3
 159 007a 40F20003 		movw	r3, #:lower16:Sensor
 160 007e C0F20003 		movt	r3, #:upper16:Sensor
 161 0082 5A70     		strb	r2, [r3, #1]
  70:../Sources/AccelTask.c **** 		      Sensor.mma7660_z = convert_accel_data( (uint8_t)recv_buffer[2] );
 162              		.loc 1 70 0
 163 0084 40F20003 		movw	r3, #:lower16:recv_buffer
 164 0088 C0F20003 		movt	r3, #:upper16:recv_buffer
 165 008c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 166 008e DBB2     		uxtb	r3, r3
 167 0090 5BB2     		sxtb	r3, r3
 168 0092 1846     		mov	r0, r3
 169 0094 FFF7FEFF 		bl	convert_accel_data
 170 0098 0346     		mov	r3, r0
 171 009a 1A46     		mov	r2, r3
 172 009c 40F20003 		movw	r3, #:lower16:Sensor
 173 00a0 C0F20003 		movt	r3, #:upper16:Sensor
 174 00a4 9A70     		strb	r2, [r3, #2]
  71:../Sources/AccelTask.c **** 		      Sensor.mma7660_status = recv_buffer[3];
 175              		.loc 1 71 0
 176 00a6 40F20003 		movw	r3, #:lower16:recv_buffer
 177 00aa C0F20003 		movt	r3, #:upper16:recv_buffer
 178 00ae DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 179 00b0 40F20003 		movw	r3, #:lower16:Sensor
 180 00b4 C0F20003 		movt	r3, #:upper16:Sensor
 181 00b8 DA70     		strb	r2, [r3, #3]
  73:../Sources/AccelTask.c **** 		      print_accelerometer_data();   
 182              		.loc 1 73 0
 183 00ba FFF7FEFF 		bl	print_accelerometer_data
  74:../Sources/AccelTask.c **** 		_time_delay(500);
 184              		.loc 1 74 0
 185 00be 4FF4FA70 		mov	r0, #500
 186 00c2 FFF7FEFF 		bl	_time_delay
  76:../Sources/AccelTask.c **** 		msg = _msg_alloc_system(sizeof(*msg));
 187              		.loc 1 76 0
 188 00c6 4FF01000 		mov	r0, #16
 189 00ca FFF7FEFF 		bl	_msg_alloc_system
 190 00ce B860     		str	r0, [r7, #8]
  77:../Sources/AccelTask.c **** 		if( msg != NULL){
 191              		.loc 1 77 0
 192 00d0 BB68     		ldr	r3, [r7, #8]
 193 00d2 002B     		cmp	r3, #0
 194 00d4 ABD0     		beq	.L5
  78:../Sources/AccelTask.c **** 			msg->HEADER.TARGET_QID = health_qid;
 195              		.loc 1 78 0
 196 00d6 BB68     		ldr	r3, [r7, #8]
 197 00d8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 198 00da 5A80     		strh	r2, [r3, #2]	@ movhi
  79:../Sources/AccelTask.c **** 			msg->MESSAGE_TYPE = ACCEL_MESSAGE;
 199              		.loc 1 79 0
 200 00dc BB68     		ldr	r3, [r7, #8]
 201 00de 4FF00202 		mov	r2, #2
 202 00e2 1A72     		strb	r2, [r3, #8]
  80:../Sources/AccelTask.c **** 			msg->DATA = 0;			
 203              		.loc 1 80 0
 204 00e4 BB68     		ldr	r3, [r7, #8]
 205 00e6 4FF00002 		mov	r2, #0
 206 00ea DA60     		str	r2, [r3, #12]
  81:../Sources/AccelTask.c **** 			_msgq_send(msg);
 207              		.loc 1 81 0
 208 00ec B868     		ldr	r0, [r7, #8]
 209 00ee FFF7FEFF 		bl	_msgq_send
 210              		.loc 1 84 0
 211 00f2 9CE7     		b	.L5
 212              		.cfi_endproc
 213              	.LFE1:
 215              		.section	.rodata
 216 0043 00       		.align	2
 217              	.LC4:
 218 0044 69326330 		.ascii	"i2c0:\000"
 218      3A00
 219 004a 0000     		.align	2
 220              	.LC5:
 221 004c 4661696C 		.ascii	"Failed to open the I2C driver!\012\000"
 221      65642074 
 221      6F206F70 
 221      656E2074 
 221      68652049 
 222              		.section	.text.InitializeI2C,"ax",%progbits
 223              		.align	2
 224              		.global	InitializeI2C
 225              		.thumb
 226              		.thumb_func
 228              	InitializeI2C:
 229              	.LFB2:
  85:../Sources/AccelTask.c **** }
  86:../Sources/AccelTask.c **** void InitializeI2C()
  87:../Sources/AccelTask.c **** {
 230              		.loc 1 87 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234 0000 80B5     		push	{r7, lr}
 235              	.LCFI5:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 7, -8
 238              		.cfi_offset 14, -4
 239 0002 00AF     		add	r7, sp, #0
 240              	.LCFI6:
 241              		.cfi_def_cfa_register 7
  88:../Sources/AccelTask.c ****    /* Open the I2C driver, and assign a I2C device handler*/
  89:../Sources/AccelTask.c ****    fd = fopen ("i2c0:", NULL);
 242              		.loc 1 89 0
 243 0004 40F20000 		movw	r0, #:lower16:.LC4
 244 0008 C0F20000 		movt	r0, #:upper16:.LC4
 245 000c 4FF00001 		mov	r1, #0
 246 0010 FFF7FEFF 		bl	_io_fopen
 247 0014 0246     		mov	r2, r0
 248 0016 40F20003 		movw	r3, #:lower16:fd
 249 001a C0F20003 		movt	r3, #:upper16:fd
 250 001e 1A60     		str	r2, [r3, #0]
  90:../Sources/AccelTask.c ****    if (fd == NULL)
 251              		.loc 1 90 0
 252 0020 40F20003 		movw	r3, #:lower16:fd
 253 0024 C0F20003 		movt	r3, #:upper16:fd
 254 0028 1B68     		ldr	r3, [r3, #0]
 255 002a 002B     		cmp	r3, #0
 256 002c 0DD1     		bne	.L7
  91:../Sources/AccelTask.c ****    {
  92:../Sources/AccelTask.c ****       printf ("Failed to open the I2C driver!\n");
 257              		.loc 1 92 0
 258 002e 40F20000 		movw	r0, #:lower16:.LC5
 259 0032 C0F20000 		movt	r0, #:upper16:.LC5
 260 0036 FFF7FEFF 		bl	_io_printf
  93:../Sources/AccelTask.c ****       _time_delay (200L);
 261              		.loc 1 93 0
 262 003a 4FF0C800 		mov	r0, #200
 263 003e FFF7FEFF 		bl	_time_delay
  94:../Sources/AccelTask.c ****       _mqx_exit (1L);
 264              		.loc 1 94 0
 265 0042 4FF00100 		mov	r0, #1
 266 0046 FFF7FEFF 		bl	_mqx_exit
 267              	.L7:
  95:../Sources/AccelTask.c ****    }
  96:../Sources/AccelTask.c **** 
  97:../Sources/AccelTask.c ****    /* Set I2C into Master mode */
  98:../Sources/AccelTask.c ****    ioctl (fd, IO_IOCTL_I2C_SET_MASTER_MODE, NULL);
 268              		.loc 1 98 0
 269 004a 40F20003 		movw	r3, #:lower16:fd
 270 004e C0F20003 		movt	r3, #:upper16:fd
 271 0052 1B68     		ldr	r3, [r3, #0]
 272 0054 1846     		mov	r0, r3
 273 0056 40F20341 		movw	r1, #1027
 274 005a 4FF00002 		mov	r2, #0
 275 005e FFF7FEFF 		bl	_io_ioctl
  99:../Sources/AccelTask.c **** }
 276              		.loc 1 99 0
 277 0062 80BD     		pop	{r7, pc}
 278              		.cfi_endproc
 279              	.LFE2:
 281              		.section	.text.InitializeMMA7660,"ax",%progbits
 282              		.align	2
 283              		.global	InitializeMMA7660
 284              		.thumb
 285              		.thumb_func
 287              	InitializeMMA7660:
 288              	.LFB3:
 100:../Sources/AccelTask.c **** 
 101:../Sources/AccelTask.c **** void InitializeMMA7660()
 102:../Sources/AccelTask.c **** {
 289              		.loc 1 102 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293 0000 80B5     		push	{r7, lr}
 294              	.LCFI7:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 00AF     		add	r7, sp, #0
 299              	.LCFI8:
 300              		.cfi_def_cfa_register 7
 103:../Sources/AccelTask.c ****    /* Configure the MMA7660 */
 104:../Sources/AccelTask.c ****    write_I2C( I2C_ACCELEROMETER_ADDRESS, 0x09, 0xE0 );
 301              		.loc 1 104 0
 302 0004 4FF04C00 		mov	r0, #76
 303 0008 4FF00901 		mov	r1, #9
 304 000c 4FF0E002 		mov	r2, #224
 305 0010 FFF7FEFF 		bl	write_I2C
 105:../Sources/AccelTask.c ****    write_I2C( I2C_ACCELEROMETER_ADDRESS, 0x07, 0x19 );
 306              		.loc 1 105 0
 307 0014 4FF04C00 		mov	r0, #76
 308 0018 4FF00701 		mov	r1, #7
 309 001c 4FF01902 		mov	r2, #25
 310 0020 FFF7FEFF 		bl	write_I2C
 106:../Sources/AccelTask.c **** }
 311              		.loc 1 106 0
 312 0024 80BD     		pop	{r7, pc}
 313              		.cfi_endproc
 314              	.LFE3:
 316 0026 00BF     		.section	.text.write_I2C,"ax",%progbits
 317              		.align	2
 318              		.global	write_I2C
 319              		.thumb
 320              		.thumb_func
 322              	write_I2C:
 323              	.LFB4:
 107:../Sources/AccelTask.c **** 
 108:../Sources/AccelTask.c **** /* Function for writing data to I2C Sensor */
 109:../Sources/AccelTask.c **** void write_I2C(int i2c_device_address, unsigned char reg, unsigned char value)
 110:../Sources/AccelTask.c **** {
 324              		.loc 1 110 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 16
 327              		@ frame_needed = 1, uses_anonymous_args = 0
 328 0000 80B5     		push	{r7, lr}
 329              	.LCFI9:
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 7, -8
 332              		.cfi_offset 14, -4
 333 0002 84B0     		sub	sp, sp, #16
 334              	.LCFI10:
 335              		.cfi_def_cfa_offset 24
 336 0004 00AF     		add	r7, sp, #0
 337              	.LCFI11:
 338              		.cfi_def_cfa_register 7
 339 0006 7860     		str	r0, [r7, #4]
 340 0008 1346     		mov	r3, r2
 341 000a 0A46     		mov	r2, r1
 342 000c FA70     		strb	r2, [r7, #3]
 343 000e BB70     		strb	r3, [r7, #2]
 111:../Sources/AccelTask.c ****    unsigned char data[2];
 112:../Sources/AccelTask.c **** 
 113:../Sources/AccelTask.c ****    data[0]=reg;   //Sensor register
 344              		.loc 1 113 0
 345 0010 FB78     		ldrb	r3, [r7, #3]
 346 0012 3B73     		strb	r3, [r7, #12]
 114:../Sources/AccelTask.c ****    data[1]=value; //Byte of data to write to register
 347              		.loc 1 114 0
 348 0014 BB78     		ldrb	r3, [r7, #2]
 349 0016 7B73     		strb	r3, [r7, #13]
 115:../Sources/AccelTask.c **** 
 116:../Sources/AccelTask.c ****    /* Set the destination address */
 117:../Sources/AccelTask.c ****    ioctl (fd, IO_IOCTL_I2C_SET_DESTINATION_ADDRESS, &i2c_device_address);
 350              		.loc 1 117 0
 351 0018 40F20003 		movw	r3, #:lower16:fd
 352 001c C0F20003 		movt	r3, #:upper16:fd
 353 0020 1A68     		ldr	r2, [r3, #0]
 354 0022 07F10403 		add	r3, r7, #4
 355 0026 1046     		mov	r0, r2
 356 0028 4FF48161 		mov	r1, #1032
 357 002c 1A46     		mov	r2, r3
 358 002e FFF7FEFF 		bl	_io_ioctl
 118:../Sources/AccelTask.c **** 
 119:../Sources/AccelTask.c ****    /* Write 2 bytes of data: the desired register and then the data */
 120:../Sources/AccelTask.c ****    fwrite (&data, 1, 2, fd);  //data to write, size of unit, # of bytes to write, I2C device handle
 359              		.loc 1 120 0
 360 0032 40F20003 		movw	r3, #:lower16:fd
 361 0036 C0F20003 		movt	r3, #:upper16:fd
 362 003a 1A68     		ldr	r2, [r3, #0]
 363 003c 07F10C03 		add	r3, r7, #12
 364 0040 1046     		mov	r0, r2
 365 0042 1946     		mov	r1, r3
 366 0044 4FF00202 		mov	r2, #2
 367 0048 FFF7FEFF 		bl	_io_write
 121:../Sources/AccelTask.c ****    fflush (fd);
 368              		.loc 1 121 0
 369 004c 40F20003 		movw	r3, #:lower16:fd
 370 0050 C0F20003 		movt	r3, #:upper16:fd
 371 0054 1B68     		ldr	r3, [r3, #0]
 372 0056 1846     		mov	r0, r3
 373 0058 FFF7FEFF 		bl	_io_fflush
 122:../Sources/AccelTask.c **** 
 123:../Sources/AccelTask.c ****    /* Send out stop */
 124:../Sources/AccelTask.c ****    ioctl (fd, IO_IOCTL_I2C_STOP, NULL);
 374              		.loc 1 124 0
 375 005c 40F20003 		movw	r3, #:lower16:fd
 376 0060 C0F20003 		movt	r3, #:upper16:fd
 377 0064 1B68     		ldr	r3, [r3, #0]
 378 0066 1846     		mov	r0, r3
 379 0068 40F20C41 		movw	r1, #1036
 380 006c 4FF00002 		mov	r2, #0
 381 0070 FFF7FEFF 		bl	_io_ioctl
 125:../Sources/AccelTask.c **** }
 382              		.loc 1 125 0
 383 0074 07F11007 		add	r7, r7, #16
 384 0078 BD46     		mov	sp, r7
 385 007a 80BD     		pop	{r7, pc}
 386              		.cfi_endproc
 387              	.LFE4:
 389              		.section	.text.read_I2C,"ax",%progbits
 390              		.align	2
 391              		.global	read_I2C
 392              		.thumb
 393              		.thumb_func
 395              	read_I2C:
 396              	.LFB5:
 126:../Sources/AccelTask.c **** 
 127:../Sources/AccelTask.c **** /* Function for reading data from I2C. Data placed in recv_buffer */
 128:../Sources/AccelTask.c **** void read_I2C(int i2c_device_address, int sensor, int length)
 129:../Sources/AccelTask.c **** {
 397              		.loc 1 129 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 24
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 0000 80B5     		push	{r7, lr}
 402              	.LCFI12:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 7, -8
 405              		.cfi_offset 14, -4
 406 0002 86B0     		sub	sp, sp, #24
 407              	.LCFI13:
 408              		.cfi_def_cfa_offset 32
 409 0004 00AF     		add	r7, sp, #0
 410              	.LCFI14:
 411              		.cfi_def_cfa_register 7
 412 0006 F860     		str	r0, [r7, #12]
 413 0008 B960     		str	r1, [r7, #8]
 414 000a 7A60     		str	r2, [r7, #4]
 130:../Sources/AccelTask.c ****    int n = length;
 415              		.loc 1 130 0
 416 000c 7B68     		ldr	r3, [r7, #4]
 417 000e 7B61     		str	r3, [r7, #20]
 131:../Sources/AccelTask.c **** 
 132:../Sources/AccelTask.c ****    /* the starting register for the particular sensor requested */
 133:../Sources/AccelTask.c ****    unsigned char reg=sensor;
 418              		.loc 1 133 0
 419 0010 BB68     		ldr	r3, [r7, #8]
 420 0012 DBB2     		uxtb	r3, r3
 421 0014 FB74     		strb	r3, [r7, #19]
 134:../Sources/AccelTask.c **** 
 135:../Sources/AccelTask.c ****    /* set the I2C destination address */
 136:../Sources/AccelTask.c ****    ioctl( fd, IO_IOCTL_I2C_SET_DESTINATION_ADDRESS, &i2c_device_address );
 422              		.loc 1 136 0
 423 0016 40F20003 		movw	r3, #:lower16:fd
 424 001a C0F20003 		movt	r3, #:upper16:fd
 425 001e 1A68     		ldr	r2, [r3, #0]
 426 0020 07F10C03 		add	r3, r7, #12
 427 0024 1046     		mov	r0, r2
 428 0026 4FF48161 		mov	r1, #1032
 429 002a 1A46     		mov	r2, r3
 430 002c FFF7FEFF 		bl	_io_ioctl
 137:../Sources/AccelTask.c **** 
 138:../Sources/AccelTask.c ****    /* tell the QE96 which sensor data to get */
 139:../Sources/AccelTask.c ****    fwrite( &reg, 1, 1, fd); //data to write, size of unit, # of bytes to write, I2C device handl er
 431              		.loc 1 139 0
 432 0030 40F20003 		movw	r3, #:lower16:fd
 433 0034 C0F20003 		movt	r3, #:upper16:fd
 434 0038 1A68     		ldr	r2, [r3, #0]
 435 003a 07F11303 		add	r3, r7, #19
 436 003e 1046     		mov	r0, r2
 437 0040 1946     		mov	r1, r3
 438 0042 4FF00102 		mov	r2, #1
 439 0046 FFF7FEFF 		bl	_io_write
 140:../Sources/AccelTask.c **** 
 141:../Sources/AccelTask.c ****    /* wait for completion */
 142:../Sources/AccelTask.c ****    fflush( fd );
 440              		.loc 1 142 0
 441 004a 40F20003 		movw	r3, #:lower16:fd
 442 004e C0F20003 		movt	r3, #:upper16:fd
 443 0052 1B68     		ldr	r3, [r3, #0]
 444 0054 1846     		mov	r0, r3
 445 0056 FFF7FEFF 		bl	_io_fflush
 143:../Sources/AccelTask.c **** 
 144:../Sources/AccelTask.c ****    /* do a repeated start to avoid giving up control */
 145:../Sources/AccelTask.c ****    ioctl( fd, IO_IOCTL_I2C_REPEATED_START, NULL );
 446              		.loc 1 145 0
 447 005a 40F20003 		movw	r3, #:lower16:fd
 448 005e C0F20003 		movt	r3, #:upper16:fd
 449 0062 1B68     		ldr	r3, [r3, #0]
 450 0064 1846     		mov	r0, r3
 451 0066 40F20B41 		movw	r1, #1035
 452 006a 4FF00002 		mov	r2, #0
 453 006e FFF7FEFF 		bl	_io_ioctl
 146:../Sources/AccelTask.c **** 
 147:../Sources/AccelTask.c ****    /* set how many bytes to read */
 148:../Sources/AccelTask.c ****    ioctl( fd, IO_IOCTL_I2C_SET_RX_REQUEST, &n );
 454              		.loc 1 148 0
 455 0072 40F20003 		movw	r3, #:lower16:fd
 456 0076 C0F20003 		movt	r3, #:upper16:fd
 457 007a 1A68     		ldr	r2, [r3, #0]
 458 007c 07F11403 		add	r3, r7, #20
 459 0080 1046     		mov	r0, r2
 460 0082 40F20A41 		movw	r1, #1034
 461 0086 1A46     		mov	r2, r3
 462 0088 FFF7FEFF 		bl	_io_ioctl
 149:../Sources/AccelTask.c **** 
 150:../Sources/AccelTask.c ****    /*
 151:../Sources/AccelTask.c ****     * read n bytes of data and put it into the recv_buffer
 152:../Sources/AccelTask.c ****     * buffer to read data into, size of unit, # of bytes to read, I2C device handler
 153:../Sources/AccelTask.c ****     */
 154:../Sources/AccelTask.c ****    fread( &recv_buffer, 1, n, fd );
 463              		.loc 1 154 0
 464 008c 40F20003 		movw	r3, #:lower16:fd
 465 0090 C0F20003 		movt	r3, #:upper16:fd
 466 0094 1A68     		ldr	r2, [r3, #0]
 467 0096 7B69     		ldr	r3, [r7, #20]
 468 0098 1046     		mov	r0, r2
 469 009a 40F20001 		movw	r1, #:lower16:recv_buffer
 470 009e C0F20001 		movt	r1, #:upper16:recv_buffer
 471 00a2 1A46     		mov	r2, r3
 472 00a4 FFF7FEFF 		bl	_io_read
 155:../Sources/AccelTask.c **** 
 156:../Sources/AccelTask.c ****    /* wait for completion */
 157:../Sources/AccelTask.c ****    fflush( fd );
 473              		.loc 1 157 0
 474 00a8 40F20003 		movw	r3, #:lower16:fd
 475 00ac C0F20003 		movt	r3, #:upper16:fd
 476 00b0 1B68     		ldr	r3, [r3, #0]
 477 00b2 1846     		mov	r0, r3
 478 00b4 FFF7FEFF 		bl	_io_fflush
 158:../Sources/AccelTask.c **** 
 159:../Sources/AccelTask.c ****    /* send out stop */
 160:../Sources/AccelTask.c ****    ioctl( fd, IO_IOCTL_I2C_STOP, NULL );
 479              		.loc 1 160 0
 480 00b8 40F20003 		movw	r3, #:lower16:fd
 481 00bc C0F20003 		movt	r3, #:upper16:fd
 482 00c0 1B68     		ldr	r3, [r3, #0]
 483 00c2 1846     		mov	r0, r3
 484 00c4 40F20C41 		movw	r1, #1036
 485 00c8 4FF00002 		mov	r2, #0
 486 00cc FFF7FEFF 		bl	_io_ioctl
 161:../Sources/AccelTask.c **** }
 487              		.loc 1 161 0
 488 00d0 07F11807 		add	r7, r7, #24
 489 00d4 BD46     		mov	sp, r7
 490 00d6 80BD     		pop	{r7, pc}
 491              		.cfi_endproc
 492              	.LFE5:
 494              		.section	.text.convert_accel_data,"ax",%progbits
 495              		.align	2
 496              		.global	convert_accel_data
 497              		.thumb
 498              		.thumb_func
 500              	convert_accel_data:
 501              	.LFB6:
 162:../Sources/AccelTask.c **** // ===  FUNCTION  ======================================================================
 163:../Sources/AccelTask.c **** //         Name:  convert_accel_data
 164:../Sources/AccelTask.c **** /**
 165:../Sources/AccelTask.c ****  * @brief Convert 6-bit result into an 8-bit signed char
 166:../Sources/AccelTask.c ****  *
 167:../Sources/AccelTask.c ****  * @param signed char
 168:../Sources/AccelTask.c ****  * 
 169:../Sources/AccelTask.c ****  * @return signed char
 170:../Sources/AccelTask.c ****  */
 171:../Sources/AccelTask.c **** // =====================================================================================
 172:../Sources/AccelTask.c **** signed char convert_accel_data ( signed char byte )
 173:../Sources/AccelTask.c **** {
 502              		.loc 1 173 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 8
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507 0000 80B4     		push	{r7}
 508              	.LCFI15:
 509              		.cfi_def_cfa_offset 4
 510              		.cfi_offset 7, -4
 511 0002 83B0     		sub	sp, sp, #12
 512              	.LCFI16:
 513              		.cfi_def_cfa_offset 16
 514 0004 00AF     		add	r7, sp, #0
 515              	.LCFI17:
 516              		.cfi_def_cfa_register 7
 517 0006 0346     		mov	r3, r0
 518 0008 FB71     		strb	r3, [r7, #7]
 174:../Sources/AccelTask.c ****    byte &= ~0x40;       // Turn off alert bit
 519              		.loc 1 174 0
 520 000a FB79     		ldrb	r3, [r7, #7]
 521 000c 23F04003 		bic	r3, r3, #64
 522 0010 FB71     		strb	r3, [r7, #7]
 175:../Sources/AccelTask.c ****    if( byte & 0x20 ) {  // update 6-bit signed format to 8-bit signed format
 523              		.loc 1 175 0
 524 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 525 0014 03F02003 		and	r3, r3, #32
 526 0018 002B     		cmp	r3, #0
 527 001a 03D0     		beq	.L12
 176:../Sources/AccelTask.c ****       byte |= 0xE0;
 528              		.loc 1 176 0
 529 001c FB79     		ldrb	r3, [r7, #7]
 530 001e 63F01F03 		orn	r3, r3, #31
 531 0022 FB71     		strb	r3, [r7, #7]
 532              	.L12:
 177:../Sources/AccelTask.c ****    }
 178:../Sources/AccelTask.c ****    return( byte );
 533              		.loc 1 178 0
 534 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 535 0026 5BB2     		sxtb	r3, r3
 179:../Sources/AccelTask.c **** }      /* -----  end of function convert_accel_data  ----- */
 536              		.loc 1 179 0
 537 0028 1846     		mov	r0, r3
 538 002a 07F10C07 		add	r7, r7, #12
 539 002e BD46     		mov	sp, r7
 540 0030 80BC     		pop	{r7}
 541 0032 7047     		bx	lr
 542              		.cfi_endproc
 543              	.LFE6:
 545              		.text
 546              	.Letext0:
 547              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 548              		.file 3 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/psptypes.h"
 549              		.file 4 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/queue.h"
 550              		.file 5 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/fio.h"
 551              		.file 6 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/io.h"
 552              		.file 7 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/message.h"
 553              		.file 8 "../Sources/main.h"
DEFINED SYMBOLS
                            *ABS*:00000000 AccelTask.c
                            *COM*:00000004 fd
                            *COM*:00000005 recv_buffer
                            *COM*:00000007 Sensor
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:22     .rodata:00000000 $d
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:23     .rodata:00000000 .LC0
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:26     .rodata:00000014 .LC1
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:29     .rodata:00000020 .LC2
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:32     .text.print_accelerometer_data:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:37     .text.print_accelerometer_data:00000000 print_accelerometer_data
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:86     .rodata:0000002c .LC3
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:89     .text.Accel_task:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:94     .text.Accel_task:00000000 Accel_task
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:228    .text.InitializeI2C:00000000 InitializeI2C
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:287    .text.InitializeMMA7660:00000000 InitializeMMA7660
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:395    .text.read_I2C:00000000 read_I2C
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:500    .text.convert_accel_data:00000000 convert_accel_data
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:217    .rodata:00000044 .LC4
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:220    .rodata:0000004c .LC5
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:223    .text.InitializeI2C:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:282    .text.InitializeMMA7660:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:322    .text.write_I2C:00000000 write_I2C
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:317    .text.write_I2C:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:390    .text.read_I2C:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccHp2XEv.s:495    .text.convert_accel_data:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_io_printf
_msgq_get_id
_time_delay
_msg_alloc_system
_msgq_send
_io_fopen
_mqx_exit
_io_ioctl
_io_write
_io_fflush
_io_read
