   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"DisplayTask.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  20              	.LC2:
  21 0000 0A204469 		.ascii	"\012 Display task started\012\000"
  21      73706C61 
  21      79207461 
  21      736B2073 
  21      74617274 
  22              		.align	2
  23              	.LC3:
  24 0018 50202564 		.ascii	"P %d;\000"
  24      3B00
  25 001e 0000     		.align	2
  26              	.LC4:
  27 0020 257300   		.ascii	"%s\000"
  28 0023 00       		.align	2
  29              	.LC5:
  30 0024 5420310A 		.ascii	"T 1\012\000"
  30      00
  31 0029 000000   		.align	2
  32              	.LC6:
  33 002c 5420320A 		.ascii	"T 2\012\000"
  33      00
  34 0031 000000   		.align	2
  35              	.LC7:
  36 0034 5420330A 		.ascii	"T 3\012\000"
  36      00
  37 0039 000000   		.align	2
  38              	.LC8:
  39 003c 5420340A 		.ascii	"T 4\012\000"
  39      00
  40 0041 000000   		.align	2
  41              	.LC9:
  42 0044 5420300A 		.ascii	"T 0\012\000"
  42      00
  43 0049 000000   		.align	2
  44              	.LC0:
  45 004c 01000000 		.word	1
  46 0050 01000000 		.word	1
  47 0054 01000000 		.word	1
  48 0058 01000000 		.word	1
  49              		.align	2
  50              	.LC1:
  51 005c 0B000080 		.word	-2147483637
  52 0060 1C000080 		.word	-2147483620
  53 0064 1D000080 		.word	-2147483619
  54 0068 0A000080 		.word	-2147483638
  55              		.section	.text.Display_task,"ax",%progbits
  56              		.align	2
  57              		.global	Display_task
  58              		.thumb
  59              		.thumb_func
  61              	Display_task:
  62              	.LFB0:
  63              		.file 1 "../Sources/DisplayTask.c"
   1:../Sources/DisplayTask.c **** /*
   2:../Sources/DisplayTask.c ****  * DisplayTask.c
   3:../Sources/DisplayTask.c ****  *
   4:../Sources/DisplayTask.c ****  *  Created on: Feb 6, 2014
   5:../Sources/DisplayTask.c ****  *      Author: Embedded Access Inc
   6:../Sources/DisplayTask.c ****  */
   7:../Sources/DisplayTask.c **** 
   8:../Sources/DisplayTask.c **** #include "main.h"
   9:../Sources/DisplayTask.c **** 
  10:../Sources/DisplayTask.c **** void print_accelerometer_data();
  11:../Sources/DisplayTask.c **** 
  12:../Sources/DisplayTask.c **** /*TASK*-----------------------------------------------------
  13:../Sources/DisplayTask.c **** * 
  14:../Sources/DisplayTask.c **** * Task Name    : Display_task
  15:../Sources/DisplayTask.c **** * Comments     :
  16:../Sources/DisplayTask.c **** *    This is the Display task
  17:../Sources/DisplayTask.c **** *
  18:../Sources/DisplayTask.c **** *END*-----------------------------------------------------*/
  19:../Sources/DisplayTask.c **** 
  20:../Sources/DisplayTask.c **** extern SENSOR_DATA Sensor;
  21:../Sources/DisplayTask.c **** 
  22:../Sources/DisplayTask.c **** void Display_task(uint32_t initial_data)
  23:../Sources/DisplayTask.c **** {
  64              		.loc 1 23 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 136
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68 0000 90B5     		push	{r4, r7, lr}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 12
  71              		.cfi_offset 4, -12
  72              		.cfi_offset 7, -8
  73              		.cfi_offset 14, -4
  74 0002 A3B0     		sub	sp, sp, #140
  75              	.LCFI1:
  76              		.cfi_def_cfa_offset 152
  77 0004 00AF     		add	r7, sp, #0
  78              	.LCFI2:
  79              		.cfi_def_cfa_register 7
  80 0006 7860     		str	r0, [r7, #4]
  24:../Sources/DisplayTask.c **** 	_queue_id my_qid;
  25:../Sources/DisplayTask.c **** 	APPLICATION_MESSAGE *msg;
  26:../Sources/DisplayTask.c **** 	int gotAccel = 0;
  81              		.loc 1 26 0
  82 0008 4FF00003 		mov	r3, #0
  83 000c C7F88430 		str	r3, [r7, #132]
  27:../Sources/DisplayTask.c **** 	int gotTouch = 0;
  84              		.loc 1 27 0
  85 0010 4FF00003 		mov	r3, #0
  86 0014 C7F88030 		str	r3, [r7, #128]
  28:../Sources/DisplayTask.c **** 	int gotPot = 0;
  87              		.loc 1 28 0
  88 0018 4FF00003 		mov	r3, #0
  89 001c FB67     		str	r3, [r7, #124]
  29:../Sources/DisplayTask.c **** 	char * touch;
  30:../Sources/DisplayTask.c **** 	
  31:../Sources/DisplayTask.c **** 	/* Lab 5 variables */
  32:../Sources/DisplayTask.c **** 	LWGPIO_STRUCT leds[4];
  33:../Sources/DisplayTask.c **** 	uint32_t i;
  34:../Sources/DisplayTask.c **** 	uint32_t func[4] = { BSP_LED1_MUX_GPIO, 
  90              		.loc 1 34 0
  91 001e 40F20003 		movw	r3, #:lower16:.LC0
  92 0022 C0F20003 		movt	r3, #:upper16:.LC0
  93 0026 07F11C04 		add	r4, r7, #28
  94 002a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
  95 002c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
  35:../Sources/DisplayTask.c **** 						 BSP_LED2_MUX_GPIO,
  36:../Sources/DisplayTask.c **** 						 BSP_LED3_MUX_GPIO, 
  37:../Sources/DisplayTask.c **** 						 BSP_LED4_MUX_GPIO };
  38:../Sources/DisplayTask.c **** 	
  39:../Sources/DisplayTask.c **** 	LWGPIO_PIN_ID pins[4] = { BSP_LED1, BSP_LED2, BSP_LED3, BSP_LED4 };
  96              		.loc 1 39 0
  97 0030 40F20003 		movw	r3, #:lower16:.LC1
  98 0034 C0F20003 		movt	r3, #:upper16:.LC1
  99 0038 07F10C04 		add	r4, r7, #12
 100 003c 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 101 003e 84E80F00 		stmia	r4, {r0, r1, r2, r3}
  40:../Sources/DisplayTask.c **** 	
  41:../Sources/DisplayTask.c **** 	touch = malloc(sizeof(char)*6);
 102              		.loc 1 41 0
 103 0042 4FF00600 		mov	r0, #6
 104 0046 FFF7FEFF 		bl	malloc
 105 004a 0346     		mov	r3, r0
 106 004c 7B67     		str	r3, [r7, #116]
  42:../Sources/DisplayTask.c **** 	
  43:../Sources/DisplayTask.c **** 	printf("\n Display task started\n"); 
 107              		.loc 1 43 0
 108 004e 40F20000 		movw	r0, #:lower16:.LC2
 109 0052 C0F20000 		movt	r0, #:upper16:.LC2
 110 0056 FFF7FEFF 		bl	_io_printf
  44:../Sources/DisplayTask.c **** 	
  45:../Sources/DisplayTask.c **** 	my_qid = _msgq_open(DISPLAY_QUEUE, 0);	
 111              		.loc 1 45 0
 112 005a 4FF00200 		mov	r0, #2
 113 005e 4FF00001 		mov	r1, #0
 114 0062 FFF7FEFF 		bl	_msgq_open
 115 0066 0346     		mov	r3, r0
 116 0068 A7F87230 		strh	r3, [r7, #114]	@ movhi
  46:../Sources/DisplayTask.c **** 	
  47:../Sources/DisplayTask.c **** 	/* Initialize leds*/
  48:../Sources/DisplayTask.c **** 	for(i=0;i<4;i++){
 117              		.loc 1 48 0
 118 006c 4FF00003 		mov	r3, #0
 119 0070 BB67     		str	r3, [r7, #120]
 120 0072 2BE0     		b	.L2
 121              	.L3:
  49:../Sources/DisplayTask.c **** 		lwgpio_init( &leds[i], pins[i], LWGPIO_DIR_OUTPUT, LWGPIO_VALUE_HIGH);
 122              		.loc 1 49 0
 123 0074 07F12C02 		add	r2, r7, #44
 124 0078 BB6F     		ldr	r3, [r7, #120]
 125 007a 4FEA0313 		lsl	r3, r3, #4
 126 007e D218     		adds	r2, r2, r3
 127 0080 BB6F     		ldr	r3, [r7, #120]
 128 0082 4FEA8303 		lsl	r3, r3, #2
 129 0086 07F18801 		add	r1, r7, #136
 130 008a CB18     		adds	r3, r1, r3
 131 008c 53F87C3C 		ldr	r3, [r3, #-124]
 132 0090 1046     		mov	r0, r2
 133 0092 1946     		mov	r1, r3
 134 0094 4FF00102 		mov	r2, #1
 135 0098 4FF00103 		mov	r3, #1
 136 009c FFF7FEFF 		bl	lwgpio_init
  50:../Sources/DisplayTask.c **** 		lwgpio_set_functionality( &leds[i], func[i]);
 137              		.loc 1 50 0
 138 00a0 07F12C02 		add	r2, r7, #44
 139 00a4 BB6F     		ldr	r3, [r7, #120]
 140 00a6 4FEA0313 		lsl	r3, r3, #4
 141 00aa D218     		adds	r2, r2, r3
 142 00ac BB6F     		ldr	r3, [r7, #120]
 143 00ae 4FEA8303 		lsl	r3, r3, #2
 144 00b2 07F18801 		add	r1, r7, #136
 145 00b6 CB18     		adds	r3, r1, r3
 146 00b8 53F86C3C 		ldr	r3, [r3, #-108]
 147 00bc 1046     		mov	r0, r2
 148 00be 1946     		mov	r1, r3
 149 00c0 FFF7FEFF 		bl	lwgpio_set_functionality
  48:../Sources/DisplayTask.c **** 	for(i=0;i<4;i++){
 150              		.loc 1 48 0
 151 00c4 BB6F     		ldr	r3, [r7, #120]
 152 00c6 03F10103 		add	r3, r3, #1
 153 00ca BB67     		str	r3, [r7, #120]
 154              	.L2:
  48:../Sources/DisplayTask.c **** 	for(i=0;i<4;i++){
 155              		.loc 1 48 0 is_stmt 0
 156 00cc BB6F     		ldr	r3, [r7, #120]
 157 00ce 032B     		cmp	r3, #3
 158 00d0 D0D9     		bls	.L3
 159              	.L19:
  51:../Sources/DisplayTask.c **** 	}	
  52:../Sources/DisplayTask.c **** 	
  53:../Sources/DisplayTask.c **** 	while(1){
  54:../Sources/DisplayTask.c **** 		
  55:../Sources/DisplayTask.c **** 		msg = _msgq_receive(my_qid, 1000); // returns null if no message after 1000ms
 160              		.loc 1 55 0 is_stmt 1
 161 00d2 B7F87230 		ldrh	r3, [r7, #114]
 162 00d6 1846     		mov	r0, r3
 163 00d8 4FF47A71 		mov	r1, #1000
 164 00dc FFF7FEFF 		bl	_msgq_receive
 165 00e0 F866     		str	r0, [r7, #108]
  56:../Sources/DisplayTask.c **** 		
  57:../Sources/DisplayTask.c **** 		if (msg != NULL ) {
 166              		.loc 1 57 0
 167 00e2 FB6E     		ldr	r3, [r7, #108]
 168 00e4 002B     		cmp	r3, #0
 169 00e6 00F0D280 		beq	.L4
  58:../Sources/DisplayTask.c **** 			//printf("Display task received message %d: %d\n", msg->MESSAGE_TYPE,msg->DATA);
  59:../Sources/DisplayTask.c **** 			
  60:../Sources/DisplayTask.c **** 
  61:../Sources/DisplayTask.c **** 			switch (msg->MESSAGE_TYPE) {
 170              		.loc 1 61 0
 171 00ea FB6E     		ldr	r3, [r7, #108]
 172 00ec 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 173 00ee A3F10203 		sub	r3, r3, #2
 174 00f2 042B     		cmp	r3, #4
 175 00f4 00F2A880 		bhi	.L5
 176 00f8 01A2     		adr	r2, .L11
 177 00fa 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 178 00fe 00BF     		.align	2
 179              	.L11:
 180 0100 89010000 		.word	.L6+1
 181 0104 15010000 		.word	.L7+1
 182 0108 25010000 		.word	.L8+1
 183 010c 59010000 		.word	.L9+1
 184 0110 97010000 		.word	.L10+1
 185              	.L7:
  62:../Sources/DisplayTask.c **** 			
  63:../Sources/DisplayTask.c **** 			case SW1_Message:
  64:../Sources/DisplayTask.c **** 				lwgpio_set_value(&leds[0], LWGPIO_VALUE_LOW); // Orange -ON
 186              		.loc 1 64 0
 187 0114 07F12C03 		add	r3, r7, #44
 188 0118 1846     		mov	r0, r3
 189 011a 4FF00001 		mov	r1, #0
 190 011e FFF7FEFF 		bl	lwgpio_set_value
  65:../Sources/DisplayTask.c **** 				break;
 191              		.loc 1 65 0
 192 0122 91E0     		b	.L5
 193              	.L8:
  66:../Sources/DisplayTask.c **** 			case SW2_Message:
  67:../Sources/DisplayTask.c **** 				//lwgpio_set_value(&leds[1], msg->DATA);
  68:../Sources/DisplayTask.c **** 				lwgpio_set_value(&leds[0], LWGPIO_VALUE_HIGH); // Orange -off
 194              		.loc 1 68 0
 195 0124 07F12C03 		add	r3, r7, #44
 196 0128 1846     		mov	r0, r3
 197 012a 4FF00101 		mov	r1, #1
 198 012e FFF7FEFF 		bl	lwgpio_set_value
  69:../Sources/DisplayTask.c **** 				lwgpio_set_value(&leds[1], LWGPIO_VALUE_HIGH); // Yellow -off
 199              		.loc 1 69 0
 200 0132 07F12C03 		add	r3, r7, #44
 201 0136 03F11003 		add	r3, r3, #16
 202 013a 1846     		mov	r0, r3
 203 013c 4FF00101 		mov	r1, #1
 204 0140 FFF7FEFF 		bl	lwgpio_set_value
  70:../Sources/DisplayTask.c **** 				lwgpio_set_value(&leds[3], LWGPIO_VALUE_HIGH); // Blue -off
 205              		.loc 1 70 0
 206 0144 07F12C03 		add	r3, r7, #44
 207 0148 03F13003 		add	r3, r3, #48
 208 014c 1846     		mov	r0, r3
 209 014e 4FF00101 		mov	r1, #1
 210 0152 FFF7FEFF 		bl	lwgpio_set_value
  71:../Sources/DisplayTask.c **** 				break;
 211              		.loc 1 71 0
 212 0156 77E0     		b	.L5
 213              	.L9:
  72:../Sources/DisplayTask.c **** 			
  73:../Sources/DisplayTask.c **** 			case ADC_READ_MESSAGE:					
  74:../Sources/DisplayTask.c **** 							
  75:../Sources/DisplayTask.c **** 				if(gotAccel){
 214              		.loc 1 75 0
 215 0158 D7F88430 		ldr	r3, [r7, #132]
 216 015c 002B     		cmp	r3, #0
 217 015e 70D0     		beq	.L20
  76:../Sources/DisplayTask.c **** 					gotPot = 1;	
 218              		.loc 1 76 0
 219 0160 4FF00103 		mov	r3, #1
 220 0164 FB67     		str	r3, [r7, #124]
  77:../Sources/DisplayTask.c **** 					printf("P %d;",msg->DATA); /* output ADC potentiometer data directly to serial	*/	
 221              		.loc 1 77 0
 222 0166 FB6E     		ldr	r3, [r7, #108]
 223 0168 DB68     		ldr	r3, [r3, #12]
 224 016a 40F20000 		movw	r0, #:lower16:.LC3
 225 016e C0F20000 		movt	r0, #:upper16:.LC3
 226 0172 1946     		mov	r1, r3
 227 0174 FFF7FEFF 		bl	_io_printf
  78:../Sources/DisplayTask.c **** 					printf("%s",touch);					
 228              		.loc 1 78 0
 229 0178 40F20000 		movw	r0, #:lower16:.LC4
 230 017c C0F20000 		movt	r0, #:upper16:.LC4
 231 0180 796F     		ldr	r1, [r7, #116]
 232 0182 FFF7FEFF 		bl	_io_printf
  79:../Sources/DisplayTask.c **** 				}								
  80:../Sources/DisplayTask.c **** 				break;
 233              		.loc 1 80 0
 234 0186 5CE0     		b	.L20
 235              	.L6:
  81:../Sources/DisplayTask.c **** 				
  82:../Sources/DisplayTask.c **** 			case ACCEL_MESSAGE:	
  83:../Sources/DisplayTask.c **** 				
  84:../Sources/DisplayTask.c **** 				gotAccel = 1;				
 236              		.loc 1 84 0
 237 0188 4FF00103 		mov	r3, #1
 238 018c C7F88430 		str	r3, [r7, #132]
  85:../Sources/DisplayTask.c **** 				print_accelerometer_data();
 239              		.loc 1 85 0
 240 0190 FFF7FEFF 		bl	print_accelerometer_data
  86:../Sources/DisplayTask.c **** 				
  87:../Sources/DisplayTask.c **** 				break;
 241              		.loc 1 87 0
 242 0194 58E0     		b	.L5
 243              	.L10:
  88:../Sources/DisplayTask.c **** 				
  89:../Sources/DisplayTask.c **** 			case TOUCH_MESSAGE:
  90:../Sources/DisplayTask.c **** 				
  91:../Sources/DisplayTask.c **** 				gotTouch = 1;			
 244              		.loc 1 91 0
 245 0196 4FF00103 		mov	r3, #1
 246 019a C7F88030 		str	r3, [r7, #128]
  92:../Sources/DisplayTask.c **** 				
  93:../Sources/DisplayTask.c **** 				if(1 == msg->DATA){					
 247              		.loc 1 93 0
 248 019e FB6E     		ldr	r3, [r7, #108]
 249 01a0 DB68     		ldr	r3, [r3, #12]
 250 01a2 012B     		cmp	r3, #1
 251 01a4 0ED1     		bne	.L13
  94:../Sources/DisplayTask.c **** 					
  95:../Sources/DisplayTask.c **** 					lwgpio_toggle_value(&leds[0]); //toggle orange LED
 252              		.loc 1 95 0
 253 01a6 07F12C03 		add	r3, r7, #44
 254 01aa 1846     		mov	r0, r3
 255 01ac FFF7FEFF 		bl	lwgpio_toggle_value
  96:../Sources/DisplayTask.c **** 					strcpy(touch,"T 1\n");
 256              		.loc 1 96 0
 257 01b0 7A6F     		ldr	r2, [r7, #116]
 258 01b2 40F20003 		movw	r3, #:lower16:.LC5
 259 01b6 C0F20003 		movt	r3, #:upper16:.LC5
 260 01ba 1868     		ldr	r0, [r3, #0]	@ unaligned
 261 01bc 1060     		str	r0, [r2, #0]	@ unaligned
 262 01be 1B79     		ldrb	r3, [r3, #4]
 263 01c0 1371     		strb	r3, [r2, #4]
  97:../Sources/DisplayTask.c **** 					
  98:../Sources/DisplayTask.c **** 					/*if(gotPot){
  99:../Sources/DisplayTask.c **** 						//printf("T 1\n");
 100:../Sources/DisplayTask.c **** 						gotPot = 0;		//We can now reset the pot since we finished the string
 101:../Sources/DisplayTask.c **** 						gotAccel = 0;   //We can reset the accel since we finished the string
 102:../Sources/DisplayTask.c **** 					}*/
 103:../Sources/DisplayTask.c **** 				}
 104:../Sources/DisplayTask.c **** 				else if(2 == msg->DATA){
 105:../Sources/DisplayTask.c **** 					
 106:../Sources/DisplayTask.c **** 						lwgpio_toggle_value(&leds[1]); //toggle yellow LED
 107:../Sources/DisplayTask.c **** 						strcpy(touch,"T 2\n"); //printf("T 2\n");
 108:../Sources/DisplayTask.c **** 						/*
 109:../Sources/DisplayTask.c **** 						if(gotPot){
 110:../Sources/DisplayTask.c **** 						gotPot = 0;		//We can now reset the pot since we finished the string
 111:../Sources/DisplayTask.c **** 						gotAccel = 0;   //We can reset the accel since we finished the string
 112:../Sources/DisplayTask.c **** 					}*/
 113:../Sources/DisplayTask.c **** 				}
 114:../Sources/DisplayTask.c **** 				else if(3 == msg->DATA){
 115:../Sources/DisplayTask.c **** 					
 116:../Sources/DisplayTask.c **** 						lwgpio_toggle_value(&leds[2]); //toggle green LED
 117:../Sources/DisplayTask.c **** 						strcpy(touch,"T 3\n"); //printf("T 3\n");
 118:../Sources/DisplayTask.c **** 						/*if(gotPot){
 119:../Sources/DisplayTask.c **** 						gotPot = 0;		//We can now reset the pot since we finished the string
 120:../Sources/DisplayTask.c **** 						gotAccel = 0;   //We can reset the accel since we finished the string
 121:../Sources/DisplayTask.c **** 					}*/
 122:../Sources/DisplayTask.c **** 				}
 123:../Sources/DisplayTask.c **** 				else if(4 == msg->DATA){
 124:../Sources/DisplayTask.c **** 					
 125:../Sources/DisplayTask.c **** 						lwgpio_toggle_value(&leds[3]); //toggle blue LED
 126:../Sources/DisplayTask.c **** 						strcpy(touch,"T 4\n"); //printf("T 4\n");
 127:../Sources/DisplayTask.c **** 					/*if(gotPot){
 128:../Sources/DisplayTask.c **** 						gotPot = 0;		//We can now reset the pot since we finished the string
 129:../Sources/DisplayTask.c **** 						gotAccel = 0;   //We can reset the accel since we finished the string
 130:../Sources/DisplayTask.c **** 					}*/
 131:../Sources/DisplayTask.c **** 				}				
 132:../Sources/DisplayTask.c **** 				break;			
 264              		.loc 1 132 0
 265 01c2 40E0     		b	.L21
 266              	.L13:
 104:../Sources/DisplayTask.c **** 				else if(2 == msg->DATA){
 267              		.loc 1 104 0
 268 01c4 FB6E     		ldr	r3, [r7, #108]
 269 01c6 DB68     		ldr	r3, [r3, #12]
 270 01c8 022B     		cmp	r3, #2
 271 01ca 10D1     		bne	.L15
 106:../Sources/DisplayTask.c **** 						lwgpio_toggle_value(&leds[1]); //toggle yellow LED
 272              		.loc 1 106 0
 273 01cc 07F12C03 		add	r3, r7, #44
 274 01d0 03F11003 		add	r3, r3, #16
 275 01d4 1846     		mov	r0, r3
 276 01d6 FFF7FEFF 		bl	lwgpio_toggle_value
 107:../Sources/DisplayTask.c **** 						strcpy(touch,"T 2\n"); //printf("T 2\n");
 277              		.loc 1 107 0
 278 01da 7A6F     		ldr	r2, [r7, #116]
 279 01dc 40F20003 		movw	r3, #:lower16:.LC6
 280 01e0 C0F20003 		movt	r3, #:upper16:.LC6
 281 01e4 1868     		ldr	r0, [r3, #0]	@ unaligned
 282 01e6 1060     		str	r0, [r2, #0]	@ unaligned
 283 01e8 1B79     		ldrb	r3, [r3, #4]
 284 01ea 1371     		strb	r3, [r2, #4]
 285              		.loc 1 132 0
 286 01ec 2BE0     		b	.L21
 287              	.L15:
 114:../Sources/DisplayTask.c **** 				else if(3 == msg->DATA){
 288              		.loc 1 114 0
 289 01ee FB6E     		ldr	r3, [r7, #108]
 290 01f0 DB68     		ldr	r3, [r3, #12]
 291 01f2 032B     		cmp	r3, #3
 292 01f4 10D1     		bne	.L16
 116:../Sources/DisplayTask.c **** 						lwgpio_toggle_value(&leds[2]); //toggle green LED
 293              		.loc 1 116 0
 294 01f6 07F12C03 		add	r3, r7, #44
 295 01fa 03F12003 		add	r3, r3, #32
 296 01fe 1846     		mov	r0, r3
 297 0200 FFF7FEFF 		bl	lwgpio_toggle_value
 117:../Sources/DisplayTask.c **** 						strcpy(touch,"T 3\n"); //printf("T 3\n");
 298              		.loc 1 117 0
 299 0204 7A6F     		ldr	r2, [r7, #116]
 300 0206 40F20003 		movw	r3, #:lower16:.LC7
 301 020a C0F20003 		movt	r3, #:upper16:.LC7
 302 020e 1868     		ldr	r0, [r3, #0]	@ unaligned
 303 0210 1060     		str	r0, [r2, #0]	@ unaligned
 304 0212 1B79     		ldrb	r3, [r3, #4]
 305 0214 1371     		strb	r3, [r2, #4]
 306              		.loc 1 132 0
 307 0216 16E0     		b	.L21
 308              	.L16:
 123:../Sources/DisplayTask.c **** 				else if(4 == msg->DATA){
 309              		.loc 1 123 0
 310 0218 FB6E     		ldr	r3, [r7, #108]
 311 021a DB68     		ldr	r3, [r3, #12]
 312 021c 042B     		cmp	r3, #4
 313 021e 12D1     		bne	.L21
 125:../Sources/DisplayTask.c **** 						lwgpio_toggle_value(&leds[3]); //toggle blue LED
 314              		.loc 1 125 0
 315 0220 07F12C03 		add	r3, r7, #44
 316 0224 03F13003 		add	r3, r3, #48
 317 0228 1846     		mov	r0, r3
 318 022a FFF7FEFF 		bl	lwgpio_toggle_value
 126:../Sources/DisplayTask.c **** 						strcpy(touch,"T 4\n"); //printf("T 4\n");
 319              		.loc 1 126 0
 320 022e 7A6F     		ldr	r2, [r7, #116]
 321 0230 40F20003 		movw	r3, #:lower16:.LC8
 322 0234 C0F20003 		movt	r3, #:upper16:.LC8
 323 0238 1868     		ldr	r0, [r3, #0]	@ unaligned
 324 023a 1060     		str	r0, [r2, #0]	@ unaligned
 325 023c 1B79     		ldrb	r3, [r3, #4]
 326 023e 1371     		strb	r3, [r2, #4]
 327              		.loc 1 132 0
 328 0240 01E0     		b	.L21
 329              	.L20:
  80:../Sources/DisplayTask.c **** 				break;
 330              		.loc 1 80 0
 331 0242 00BF     		nop
 332 0244 00E0     		b	.L5
 333              	.L21:
 334              		.loc 1 132 0
 335 0246 00BF     		nop
 336              	.L5:
 133:../Sources/DisplayTask.c **** 			}
 134:../Sources/DisplayTask.c **** 			if((!gotTouch) && (gotPot == 1) && (gotAccel == 1)){	/* If there was no touch, and we are ready 
 337              		.loc 1 134 0
 338 0248 D7F88030 		ldr	r3, [r7, #128]
 339 024c 002B     		cmp	r3, #0
 340 024e 16D1     		bne	.L17
 341              		.loc 1 134 0 is_stmt 0
 342 0250 FB6F     		ldr	r3, [r7, #124]
 343 0252 012B     		cmp	r3, #1
 344 0254 13D1     		bne	.L17
 345 0256 D7F88430 		ldr	r3, [r7, #132]
 346 025a 012B     		cmp	r3, #1
 347 025c 0FD1     		bne	.L17
 135:../Sources/DisplayTask.c **** 				strcpy(touch,"T 0\n");//printf("T 0\n");
 348              		.loc 1 135 0 is_stmt 1
 349 025e 7A6F     		ldr	r2, [r7, #116]
 350 0260 40F20003 		movw	r3, #:lower16:.LC9
 351 0264 C0F20003 		movt	r3, #:upper16:.LC9
 352 0268 1868     		ldr	r0, [r3, #0]	@ unaligned
 353 026a 1060     		str	r0, [r2, #0]	@ unaligned
 354 026c 1B79     		ldrb	r3, [r3, #4]
 355 026e 1371     		strb	r3, [r2, #4]
 136:../Sources/DisplayTask.c **** 				gotPot = 0;		//We can now reset the pot since we finished the string
 356              		.loc 1 136 0
 357 0270 4FF00003 		mov	r3, #0
 358 0274 FB67     		str	r3, [r7, #124]
 137:../Sources/DisplayTask.c **** 				gotAccel = 0;   //We can reset the accel since we finished the string
 359              		.loc 1 137 0
 360 0276 4FF00003 		mov	r3, #0
 361 027a C7F88430 		str	r3, [r7, #132]
 362              	.L17:
 138:../Sources/DisplayTask.c **** 			}
 139:../Sources/DisplayTask.c **** 			gotTouch = 0; //We are now finished with the touch, it should be reset				
 363              		.loc 1 139 0
 364 027e 4FF00003 		mov	r3, #0
 365 0282 C7F88030 		str	r3, [r7, #128]
 140:../Sources/DisplayTask.c **** 			_msg_free(msg);
 366              		.loc 1 140 0
 367 0286 F86E     		ldr	r0, [r7, #108]
 368 0288 FFF7FEFF 		bl	_msg_free
 141:../Sources/DisplayTask.c **** 		}  
 142:../Sources/DisplayTask.c **** 		else{
 143:../Sources/DisplayTask.c **** 			lwgpio_toggle_value(&leds[2]); //toggle green LED
 144:../Sources/DisplayTask.c **** 		}
 145:../Sources/DisplayTask.c **** 	}
 369              		.loc 1 145 0
 370 028c 21E7     		b	.L19
 371              	.L4:
 143:../Sources/DisplayTask.c **** 			lwgpio_toggle_value(&leds[2]); //toggle green LED
 372              		.loc 1 143 0
 373 028e 07F12C03 		add	r3, r7, #44
 374 0292 03F12003 		add	r3, r3, #32
 375 0296 1846     		mov	r0, r3
 376 0298 FFF7FEFF 		bl	lwgpio_toggle_value
 377              		.loc 1 145 0
 378 029c 19E7     		b	.L19
 379              		.cfi_endproc
 380              	.LFE0:
 382 029e 00BF     		.section	.rodata
 383              		.align	2
 384              	.LC10:
 385 006c 41202530 		.ascii	"A %04d;\000"
 385      34643B00 
 386              		.align	2
 387              	.LC11:
 388 0074 25303464 		.ascii	"%04d;\000"
 388      3B00
 389 007a 0000     		.section	.text.print_accelerometer_data,"ax",%progbits
 390              		.align	2
 391              		.global	print_accelerometer_data
 392              		.thumb
 393              		.thumb_func
 395              	print_accelerometer_data:
 396              	.LFB1:
 146:../Sources/DisplayTask.c **** }
 147:../Sources/DisplayTask.c **** void print_accelerometer_data()
 148:../Sources/DisplayTask.c **** {
 397              		.loc 1 148 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 0000 80B5     		push	{r7, lr}
 402              	.LCFI3:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 7, -8
 405              		.cfi_offset 14, -4
 406 0002 00AF     		add	r7, sp, #0
 407              	.LCFI4:
 408              		.cfi_def_cfa_register 7
 149:../Sources/DisplayTask.c ****    //MMA7660 Sensor
 150:../Sources/DisplayTask.c **** 
 151:../Sources/DisplayTask.c ****    printf("A %04d;", Sensor.mma7660_x*5 );
 409              		.loc 1 151 0
 410 0004 40F20003 		movw	r3, #:lower16:Sensor
 411 0008 C0F20003 		movt	r3, #:upper16:Sensor
 412 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 413 000e 5AB2     		sxtb	r2, r3
 414 0010 1346     		mov	r3, r2
 415 0012 4FEA8303 		lsl	r3, r3, #2
 416 0016 9B18     		adds	r3, r3, r2
 417 0018 40F20000 		movw	r0, #:lower16:.LC10
 418 001c C0F20000 		movt	r0, #:upper16:.LC10
 419 0020 1946     		mov	r1, r3
 420 0022 FFF7FEFF 		bl	_io_printf
 152:../Sources/DisplayTask.c ****    printf("%04d;", Sensor.mma7660_y*5 );
 421              		.loc 1 152 0
 422 0026 40F20003 		movw	r3, #:lower16:Sensor
 423 002a C0F20003 		movt	r3, #:upper16:Sensor
 424 002e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 425 0030 5AB2     		sxtb	r2, r3
 426 0032 1346     		mov	r3, r2
 427 0034 4FEA8303 		lsl	r3, r3, #2
 428 0038 9B18     		adds	r3, r3, r2
 429 003a 40F20000 		movw	r0, #:lower16:.LC11
 430 003e C0F20000 		movt	r0, #:upper16:.LC11
 431 0042 1946     		mov	r1, r3
 432 0044 FFF7FEFF 		bl	_io_printf
 153:../Sources/DisplayTask.c ****    printf("%04d;", Sensor.mma7660_z*5 );
 433              		.loc 1 153 0
 434 0048 40F20003 		movw	r3, #:lower16:Sensor
 435 004c C0F20003 		movt	r3, #:upper16:Sensor
 436 0050 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 437 0052 5AB2     		sxtb	r2, r3
 438 0054 1346     		mov	r3, r2
 439 0056 4FEA8303 		lsl	r3, r3, #2
 440 005a 9B18     		adds	r3, r3, r2
 441 005c 40F20000 		movw	r0, #:lower16:.LC11
 442 0060 C0F20000 		movt	r0, #:upper16:.LC11
 443 0064 1946     		mov	r1, r3
 444 0066 FFF7FEFF 		bl	_io_printf
 154:../Sources/DisplayTask.c **** }
 445              		.loc 1 154 0
 446 006a 80BD     		pop	{r7, pc}
 447              		.cfi_endproc
 448              	.LFE1:
 450              		.text
 451              	.Letext0:
 452              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 453              		.file 3 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/MK60DZ10.h"
 454              		.file 4 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/bsp/lwgpio_kgpio.h"
 455              		.file 5 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/bsp/lwgpio.h"
 456              		.file 6 "C:/Freescale/Freescale_MQX_4_1/lib/twrk60n512.cw10gcc/debug/psp/message.h"
 457              		.file 7 "../Sources/main.h"
 458              		.file 8 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 DisplayTask.c
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:19     .rodata:00000000 $d
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:20     .rodata:00000000 .LC2
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:23     .rodata:00000018 .LC3
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:26     .rodata:00000020 .LC4
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:29     .rodata:00000024 .LC5
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:32     .rodata:0000002c .LC6
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:35     .rodata:00000034 .LC7
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:38     .rodata:0000003c .LC8
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:41     .rodata:00000044 .LC9
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:44     .rodata:0000004c .LC0
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:50     .rodata:0000005c .LC1
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:56     .text.Display_task:00000000 $t
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:61     .text.Display_task:00000000 Display_task
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:180    .text.Display_task:00000100 $d
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:187    .text.Display_task:00000114 $t
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:395    .text.print_accelerometer_data:00000000 print_accelerometer_data
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:384    .rodata:0000006c .LC10
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:387    .rodata:00000074 .LC11
C:\Users\Angus\AppData\Local\Temp\ccslUpk6.s:390    .text.print_accelerometer_data:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
malloc
_io_printf
_msgq_open
lwgpio_init
lwgpio_set_functionality
_msgq_receive
lwgpio_set_value
lwgpio_toggle_value
_msg_free
Sensor
